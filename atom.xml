<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  <subtitle>严律己，宽待人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.liwenguang.cn/"/>
  <updated>2018-05-16T15:51:00.000Z</updated>
  <id>http://www.liwenguang.cn/</id>
  
  <author>
    <name>TheOhters</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二、shell 脚本</title>
    <link href="http://www.liwenguang.cn/2018/05/16/linux_cli_shell/2.html/"/>
    <id>http://www.liwenguang.cn/2018/05/16/linux_cli_shell/2.html/</id>
    <published>2018-05-16T15:51:00.000Z</published>
    <updated>2018-05-16T15:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="13-参考"><a href="#13-参考" class="headerlink" title="13 参考"></a>13 参考</h2><p>第十一章 构建基本脚本：<a href="http://www.suoniao.com/article/15930" target="_blank" rel="external">http://www.suoniao.com/article/15930</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;13-参考&quot;&gt;&lt;a href=&quot;#13-参考&quot; class=&quot;headerlink&quot; title=&quot;13 参考&quot;&gt;&lt;/a&gt;13 参考&lt;/h2&gt;&lt;p&gt;第十一章 构建基本脚本：&lt;a href=&quot;http://www.suoniao.com/article/15930&quot;
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux命令行与shell脚本编程大全" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Eshell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%A4%A7%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>一、bash shell 命令</title>
    <link href="http://www.liwenguang.cn/2018/05/16/linux_cli_shell/1.html/"/>
    <id>http://www.liwenguang.cn/2018/05/16/linux_cli_shell/1.html/</id>
    <published>2018-05-16T15:51:00.000Z</published>
    <updated>2018-05-16T15:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-bash-手册"><a href="#1-bash-手册" class="headerlink" title="1. bash 手册"></a>1. bash 手册</h3><p>用于查看命令的具体详情</p><p>man xxx</p><h2 id="2-ls-文件和目录列表"><a href="#2-ls-文件和目录列表" class="headerlink" title="2. ls 文件和目录列表"></a>2. ls 文件和目录列表</h2><p>-a 显示隐藏文件<br>文件名支持 <code>*？</code> 符号过滤  </p><h3 id="3-处理文件"><a href="#3-处理文件" class="headerlink" title="3. 处理文件"></a>3. 处理文件</h3><p>-i 询问参数<br>touch<br>cp file1 file2：复制文件。参数 -R 用于递归复制文件<br>mv file1 file2：移动文件rm file1：删除文件，文件名支持<code>?*</code></p><h3 id="4-处理目录"><a href="#4-处理目录" class="headerlink" title="4. 处理目录"></a>4. 处理目录</h3><p>mkdir：创建目录。-p 创建多个目录和子目录<br>rmdir：删除空目录rm -rf：递归删除，-r 递归遍历，-f 删除不提示</p><h3 id="5-查看文件内容"><a href="#5-查看文件内容" class="headerlink" title="5. 查看文件内容"></a>5. 查看文件内容</h3><p>file file1：获取文件的类型<br>cat file1：显示文本所有内容，参数 -n 加上行数，参数 -b 只给有内容的行加行数<br>more file1：<br>less file1：<br>tail file1：参数 -f，动态查看文件内容</p><h3 id="6-检测程序"><a href="#6-检测程序" class="headerlink" title="6. 检测程序"></a>6. 检测程序</h3><p>ps： -ef<br>top：实时检测，q 退出<br>kill PID：-9 参数强制<br>killall Name：关闭进程名，可以使用通配符</p><h3 id="7-检测磁盘空间"><a href="#7-检测磁盘空间" class="headerlink" title="7. 检测磁盘空间"></a>7. 检测磁盘空间</h3><p>mount：挂载媒体的<br>unmount：移除可移动设备<br>sort file：文件排序<br>grep pattern file：在 file 文件中查找 pattern 的行。-v 参数反向搜索<br>gzip/gunzip：压缩解压文件tar：-A 追加归档，-x 提取文件</p><h3 id="8-理解-shell"><a href="#8-理解-shell" class="headerlink" title="8. 理解 shell"></a>8. 理解 shell</h3><p>&amp;：将任务置入后台模式<br>which 命令：查看命令的对应路径<br>history：最近的使用过的命令列表  </p><h3 id="9-使用Linux环境变量"><a href="#9-使用Linux环境变量" class="headerlink" title="9. 使用Linux环境变量"></a>9. 使用Linux环境变量</h3><p>查看环境全局变量：printenv/env<br>查看环境局部变量：set<br>export：将一个局部变量的key导出到全局环境中  </p><h3 id="10-管理文件系统"><a href="#10-管理文件系统" class="headerlink" title="10. 管理文件系统"></a>10. 管理文件系统</h3><ol><li>ext 文件系统：单文件不能超过2GB。</li><li>ext2 文件系统：保存更多信息。</li><li>日志文件系统：先将数据直接写入存储设备再更新索引节点表-&gt;文件的更改写入到临时文件中，数据成功写到存储设备和索引节点表后再删除对应的日志条目。</li><li>ext3 文件系统：在 ext2 基础上，给每个存储设备增加了一个日志文件。</li><li>ext4 文件系统。</li></ol><h3 id="11-安装软件程序"><a href="#11-安装软件程序" class="headerlink" title="11. 安装软件程序"></a>11. 安装软件程序</h3><ol><li>Debian（Ubuntu）：dpkg 命令。</li><li>Red Hat：rpm 命令。yum 命令。</li></ol><h3 id="12-使用编辑器"><a href="#12-使用编辑器" class="headerlink" title="12. 使用编辑器"></a>12. 使用编辑器</h3><p>vim<br>nano<br>emacs</p><h2 id="13-参考"><a href="#13-参考" class="headerlink" title="13. 参考"></a>13. 参考</h2><p>第一章 初识Linux shell：<a href="http://www.ituring.com.cn/book/tupubarticle/11430" target="_blank" rel="external">http://www.ituring.com.cn/book/tupubarticle/11430</a>第二章 走进shell：<a href="http://www.ituring.com.cn/book/tupubarticle/11431" target="_blank" rel="external">http://www.ituring.com.cn/book/tupubarticle/11431</a>第三章 基本的bash shell命令：<a href="http://www.ituring.com.cn/book/tupubarticle/11432" target="_blank" rel="external">http://www.ituring.com.cn/book/tupubarticle/11432</a>第四章 更多的bash shell命令： <a href="http://www.th7.cn/system/lin/201704/210752.shtml" target="_blank" rel="external">http://www.th7.cn/system/lin/201704/210752.shtml</a>第五章 理解shell：<a href="http://www.th7.cn/system/lin/201704/211006.shtml" target="_blank" rel="external">http://www.th7.cn/system/lin/201704/211006.shtml</a>第六章 使用Linux环境变量：<a href="http://www.voidcn.com/article/p-vizgjbtx-bmq.html" target="_blank" rel="external">http://www.voidcn.com/article/p-vizgjbtx-bmq.html</a>第七章 理解Linux文件权限：<a href="http://www.voidcn.com/article/p-whblgnni-bmq.html" target="_blank" rel="external">http://www.voidcn.com/article/p-whblgnni-bmq.html</a>第八章 管理文件系统：<a href="https://www.aliyun.com/jiaocheng/123749.html" target="_blank" rel="external">https://www.aliyun.com/jiaocheng/123749.html</a>第九章 安装软件程序：<a href="https://www.aliyun.com/jiaocheng/123748.html" target="_blank" rel="external">https://www.aliyun.com/jiaocheng/123748.html</a>第十章 使用编辑器：<a href="http://www.voidcn.com/article/p-fokuslvn-bnt.html" target="_blank" rel="external">http://www.voidcn.com/article/p-fokuslvn-bnt.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-bash-手册&quot;&gt;&lt;a href=&quot;#1-bash-手册&quot; class=&quot;headerlink&quot; title=&quot;1. bash 手册&quot;&gt;&lt;/a&gt;1. bash 手册&lt;/h3&gt;&lt;p&gt;用于查看命令的具体详情&lt;/p&gt;
&lt;p&gt;man xxx&lt;/p&gt;
&lt;h2 id=&quot;2
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux命令行与shell脚本编程大全" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8Eshell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%A4%A7%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>面试自我反省总结</title>
    <link href="http://www.liwenguang.cn/2018/05/08/tech/learn_what_how_why.html/"/>
    <id>http://www.liwenguang.cn/2018/05/08/tech/learn_what_how_why.html/</id>
    <published>2018-05-08T13:51:00.000Z</published>
    <updated>2018-05-16T15:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-第一个面试大概是年前还差半个月放假的某天晚上，一个电话面试，杭州的一个偏传统公司，应该是主要做-ERP-这类的系统，最后-HR-等年后通知就没通知了。"><a href="#1-第一个面试大概是年前还差半个月放假的某天晚上，一个电话面试，杭州的一个偏传统公司，应该是主要做-ERP-这类的系统，最后-HR-等年后通知就没通知了。" class="headerlink" title="1. 第一个面试大概是年前还差半个月放假的某天晚上，一个电话面试，杭州的一个偏传统公司，应该是主要做 ERP 这类的系统，最后 HR 等年后通知就没通知了。"></a>1. 第一个面试大概是年前还差半个月放假的某天晚上，一个电话面试，杭州的一个偏传统公司，应该是主要做 ERP 这类的系统，最后 HR 等年后通知就没通知了。</h3><p>主要问了 java 集合，包括里面 List、Set、Map 各个区别以及相关算法、Spring 的设计模式、Spring MVC 和 Servlet 的联系区别、Spring 的相关源码，我当时只说了 Spring MVC 启动、运行源码流程，@Autowire 注入的时候的 AutowireAnnotationBeanPostProcessor 的相关逻辑，顺带讲了 Bean 的生命周期，循环注入等，还有一些常见的面试题给忘了。</p><h3 id="2-第二个面试是4-26号武汉小米的面试，以为一面不会过，没想到过了，可惜二面BOS没过，主要是对自己的项目没答好，可能由于没怎么复习以前的项目，不过学了很多。"><a href="#2-第二个面试是4-26号武汉小米的面试，以为一面不会过，没想到过了，可惜二面BOS没过，主要是对自己的项目没答好，可能由于没怎么复习以前的项目，不过学了很多。" class="headerlink" title="2. 第二个面试是4.26号武汉小米的面试，以为一面不会过，没想到过了，可惜二面BOS没过，主要是对自己的项目没答好，可能由于没怎么复习以前的项目，不过学了很多。"></a>2. 第二个面试是4.26号武汉小米的面试，以为一面不会过，没想到过了，可惜二面BOS没过，主要是对自己的项目没答好，可能由于没怎么复习以前的项目，不过学了很多。</h3><p>一面先问 hashmap 的 put，currenthashmap 的 put，以及 size，然后是 ThreadLocal，订阅模式、命令模式、代理模式，sql，组合索引，手写一些 sql 问是否用到了索引，手写一个 幻读，隔离级别与事务传播，那个幻读没写出来，然后被一面的面试官评价为基础可以但是 sql 不行，唉，然后问我最得意的项目，我说的是一个基于 ZooKeeper 的一个项目，然后问了 zk 的一些知识，两阶段提交、paxos（这个没答出来）、CAP、BASE，然后问如何实现一个分布式锁，然后问了项目的一些问题，涉及到了线程池。<br>二面直接让我把一个 BI 的项目技术架构图画出来，然后问 ETL ，RPC 和 http 的区别，然后其它一些小问题，跟我说要多敲代码，不是本专业只能要非常突出的代码能力才行。。。然后谈论了业务和技术，最后直接跟我说没过。比较奇怪没有问 JVM，可能是三面才会问这么高深的吧。。。<br>事后也把我做的项目都复习总结拿出来重新过了一遍，学了很多，然后好好复习，准备下一个面试。</p><h3 id="3-第三个面试是上海的一家创业公司，笔试，两轮技术，HR，拿到-offer-没去。"><a href="#3-第三个面试是上海的一家创业公司，笔试，两轮技术，HR，拿到-offer-没去。" class="headerlink" title="3. 第三个面试是上海的一家创业公司，笔试，两轮技术，HR，拿到 offer 没去。"></a>3. 第三个面试是上海的一家创业公司，笔试，两轮技术，HR，拿到 offer 没去。</h3><p>笔试：两个类A extend B，考察静态方法和构造方法的执行顺序，二分查找法，mysql 的 having order 等。<br>技术面试，一问 hashmap 然后问简历项目。最后问多个线程同时下载报表如何下载。主问简历。<br>二轮BOS，一问 某个业务从请求到最后日志记录的业务全过程。然后聊了很多，treemap 和 hashmap，git rebase merge，最后一个问题是一千个排好序的文件，如果成为一个大的排序好的文件。大概这么多</p><h3 id="4-第四个面试是上海同事推荐，两面技术，拿到-offer。"><a href="#4-第四个面试是上海同事推荐，两面技术，拿到-offer。" class="headerlink" title="4. 第四个面试是上海同事推荐，两面技术，拿到 offer。"></a>4. 第四个面试是上海同事推荐，两面技术，拿到 offer。</h3><p>一面电话：集合、threadlocal、锁、线程池。多态、继承、封装的理解，主要是基础，具体问的大概忘了，并不深入。<br>二面聊天：一问，nginx 实现负载均衡的方式，底层如何实现负载均衡，zk 的实际案例，为什么用 zk，内部如何选举。大概这么多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-第一个面试大概是年前还差半个月放假的某天晚上，一个电话面试，杭州的一个偏传统公司，应该是主要做-ERP-这类的系统，最后-HR-等年后通知就没通知了。&quot;&gt;&lt;a href=&quot;#1-第一个面试大概是年前还差半个月放假的某天晚上，一个电话面试，杭州的一个偏传统公司，
      
    
    </summary>
    
      <category term="小结" scheme="http://www.liwenguang.cn/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>ThreadLocal.md</title>
    <link href="http://www.liwenguang.cn/2018/04/13/A2B_Java/3_ThreadLocal.html/"/>
    <id>http://www.liwenguang.cn/2018/04/13/A2B_Java/3_ThreadLocal.html/</id>
    <published>2018-04-13T10:00:00.000Z</published>
    <updated>2018-04-13T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Thread：ThreadLocalMap-1-1"><a href="#1-Thread：ThreadLocalMap-1-1" class="headerlink" title="1. Thread：ThreadLocalMap = 1:1"></a>1. Thread：ThreadLocalMap = 1:1</h1><p>每个 Thread 内部维护了一个 ThreadLocal.ThreadLocalMap 对象</p><h1 id="2-ThreadLocalMap：-ThreadLocal-Entry-1-16"><a href="#2-ThreadLocalMap：-ThreadLocal-Entry-1-16" class="headerlink" title="2. ThreadLocalMap：[ThreadLocal, Entry] = 1:16"></a>2. ThreadLocalMap：[ThreadLocal, Entry] = 1:16</h1><p>每个 ThreadLocalMap 内部维护的键值对是 [ThreadLocal, Entry]。<br>而在底层，查找的时候是通过 <code>ThreadLocal.threadLocalHashCode &amp; (table.length - 1)</code> 获取值，得到 0~15 之间的值，并获取到 Entry[i]，进而获取 Entry.value。  </p><blockquote><p>因此一个线程的 ThreadLocal 最好不要超过 16 个</p></blockquote><p>如下底层源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class="line">        Object value;</div><div class="line"></div><div class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class="line">            <span class="keyword">super</span>(k);</div><div class="line">            value = v;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Entry[] table;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>由于底层通过数组维护，如果在 set 时碰到了 hash 碰撞则进行 replace：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Entry e = tab[i];</div><div class="line">        e != <span class="keyword">null</span>;</div><div class="line">        e = tab[i = nextIndex(i, len)]) &#123;</div><div class="line">    ThreadLocal&lt;?&gt; k = e.get();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (k == key) &#123;</div><div class="line">        e.value = value;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</div><div class="line">        replaceStaleEntry(key, value, i);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="3-图解"><a href="#3-图解" class="headerlink" title="3. 图解"></a>3. 图解</h1><p><img src="https://img-blog.csdn.net/20170125180420388?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg4Nzc0NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="1"></p><h1 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h1><ol><li>ThreadLocal 并未解决多线程访问共享对象的问题，而是每个线程一个独占的变量</li><li>ThreadLocal并不是每个线程拷贝一个对象，而是直接new（新建）一个</li><li>如果ThreadLocal.set()的对象是多线程共享的，那么还是涉及并发问题。</li></ol><h1 id="5-Spring-中的-ThreadLocal-使用"><a href="#5-Spring-中的-ThreadLocal-使用" class="headerlink" title="5. Spring 中的 ThreadLocal 使用"></a>5. Spring 中的 ThreadLocal 使用</h1><p>Spring使用ThreadLocal解决线程安全问题。一般情况下，只有无状态的Bean才可以在多线程环境下共享，在Spring中，绝大部分Bean都可以声明为singleton作用域。就是因为Spring对一些Bean（如RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等）中非线程安全状态采用ThreadLocal进行处理，让它们也成为线程安全的状态，因为有状态的Bean就可以在多线程中共享了。<br>一般的Web应用划分为展现层、服务层和持久层三个层次，在不同的层中编写对应的逻辑，下层通过接口向上层开放功能调用。在一般情况下，从接收请求到返回响应所经过的所有程序调用都同属于一个线程。</p><p>参考：<a href="https://blog.csdn.net/u010887744/article/details/54730556" target="_blank" rel="external">https://blog.csdn.net/u010887744/article/details/54730556</a><br>参考：<a href="http://neoremind.com/2010/11/threadlocal_learn/" target="_blank" rel="external">http://neoremind.com/2010/11/threadlocal_learn/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Thread：ThreadLocalMap-1-1&quot;&gt;&lt;a href=&quot;#1-Thread：ThreadLocalMap-1-1&quot; class=&quot;headerlink&quot; title=&quot;1. Thread：ThreadLocalMap = 1:1&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="Java 拾遗" scheme="http://www.liwenguang.cn/categories/Java-%E6%8B%BE%E9%81%97/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM_Memory.md</title>
    <link href="http://www.liwenguang.cn/2018/04/13/A2B_Java/4_JVM_Memory.html/"/>
    <id>http://www.liwenguang.cn/2018/04/13/A2B_Java/4_JVM_Memory.html/</id>
    <published>2018-04-13T10:00:00.000Z</published>
    <updated>2018-04-13T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://www.cnblogs.com/dolphin0520/p/3613043.html" target="_blank" rel="external">https://www.cnblogs.com/dolphin0520/p/3613043.html</a></p><h1 id="1-运行时数据区（Runtime-Data-Area）"><a href="#1-运行时数据区（Runtime-Data-Area）" class="headerlink" title="1. 运行时数据区（Runtime Data Area）"></a>1. 运行时数据区（Runtime Data Area）</h1><ol><li>Java 栈（VM Stack）</li><li>本地方法栈（Native Method Stack）</li><li>程序计数器（Program Counter Register）</li><li>堆（Heap）</li><li>方法区（Method Area）</li></ol><p><img src="https://images0.cnblogs.com/i/288799/201405/281726404166686.jpg" alt="1"></p><h1 id="2-各个区具体存储了什么数据"><a href="#2-各个区具体存储了什么数据" class="headerlink" title="2. 各个区具体存储了什么数据"></a>2. 各个区具体存储了什么数据</h1><h2 id="2-1-程序计数器"><a href="#2-1-程序计数器" class="headerlink" title="2.1 程序计数器"></a>2.1 程序计数器</h2><p>由于在JVM中，多线程是通过线程轮流切换来获得CPU执行时间的，因此，在任一具体时刻，一个CPU的内核只会执行一条线程中的指令，因此，为了能够使得每个线程都在线程切换后能够恢复在切换之前的程序执行位置，每个线程都需要有自己独立的程序计数器，并且不能互相被干扰，否则就会影响到程序的正常执行次序。因此，可以这么说，程序计数器是每个线程所私有的。  </p><p>在JVM规范中规定，如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是native方法，则程序计数器中的值是undefined。  </p><p>由于程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)的。</p><h2 id="2-2-Java-栈"><a href="#2-2-Java-栈" class="headerlink" title="2.2 Java 栈"></a>2.2 Java 栈</h2><p>Java栈中存放的是一个个的栈帧，每个栈帧对应一个被调用的方法，在栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向当前方法所属的类的运行时常量池（运行时常量池的概念在方法区部分会谈到）的引用(Reference to runtime constant pool)、方法返回地址(Return Address)和一些额外的附加信息。当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。因此可知，线程当前执行的方法所对应的栈帧必定位于Java栈的顶部。  </p><p><img src="https://images0.cnblogs.com/i/288799/201405/291429030562182.jpg" alt="2">  </p><p>局部变量表：对于基本数据类型的变量，则直接存储它的值，对于引用类型的变量，则存的是指向对象的引用。局部变量表的大小在编译器就可以确定其大小了，因此在程序执行期间局部变量表的大小是不会改变的。  </p><p>操作数栈：想必学过数据结构中的栈的朋友想必对表达式求值问题不会陌生，栈最典型的一个应用就是用来对表达式求值。想想一个线程执行方法的过程中，实际上就是不断执行语句的过程，而归根到底就是进行计算的过程。因此可以这么说，程序中的所有计算过程都是在借助于操作数栈来完成的。  </p><p>指向运行时常量池的引用：因为在方法执行的过程中有可能需要用到类中的常量，所以必须要有一个引用指向运行时常量。  </p><p>方法返回地址：当一个方法执行完毕之后，要返回之前调用它的地方，因此在栈帧中必须保存一个方法返回地址。  </p><p>由于每个线程正在执行的方法可能不同，因此每个线程都会有一个自己的Java栈，互不干扰。</p><h2 id="2-3-本地方法栈"><a href="#2-3-本地方法栈" class="headerlink" title="2.3 本地方法栈"></a>2.3 本地方法栈</h2><p>本地方法栈与Java栈的作用和原理非常相似。区别只不过是Java栈是为执行Java方法服务的，而本地方法栈则是为执行本地方法（Native Method）服务的。<br>在JVM规范中，并没有对本地方发展的具体实现方法以及数据结构作强制规定，虚拟机可以自由实现它。在HotSopt虚拟机中直接就把本地方法栈和Java栈合二为一。</p><h2 id="2-4-堆"><a href="#2-4-堆" class="headerlink" title="2.4 堆"></a>2.4 堆</h2><p>Java中的堆是用来存储对象本身的以及数组（当然，数组引用是存放在Java栈中的）。<br>Java的垃圾回收机制会自动进行处理。因此这部分空间也是Java垃圾收集器管理的主要区域。另外，堆是被所有线程共享的，在JVM中只有一个堆。</p><h2 id="2-5-方法区"><a href="#2-5-方法区" class="headerlink" title="2.5 方法区"></a>2.5 方法区</h2><p>方法区在JVM中也是一个非常重要的区域，它与堆一样，是被线程共享的区域。在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。  </p><p>在Class文件中除了类的字段、方法、接口等描述信息外，还有一项信息是常量池，用来存储编译期间生成的字面量和符号引用。  </p><p>在方法区中有一个非常重要的部分就是运行时常量池，它是每一个类或接口的常量池的运行时表示形式，在类和接口被加载到JVM后，对应的运行时常量池就被创建出来。当然并非Class文件常量池中的内容才能进入运行时常量池，在运行期间也可将新的常量放入运行时常量池中，比如String的intern方法。  </p><p>在JVM规范中，没有强制要求方法区必须实现垃圾回收。很多人习惯将方法区称为“永久代”，是因为HotSpot虚拟机以永久代来实现方法区，从而JVM的垃圾收集器可以像管理堆区一样管理这部分区域，从而不需要专门为这部分设计垃圾回收机制。不过自从JDK7之后，Hotspot虚拟机便将运行时常量池从永久代移除了。</p><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自：&lt;a href=&quot;https://www.cnblogs.com/dolphin0520/p/3613043.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cnblogs.com/dolphin0520/p/3613
      
    
    </summary>
    
      <category term="Java 拾遗" scheme="http://www.liwenguang.cn/categories/Java-%E6%8B%BE%E9%81%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring_1.md</title>
    <link href="http://www.liwenguang.cn/2018/04/13/A2B_Java/5_Spring_1.html/"/>
    <id>http://www.liwenguang.cn/2018/04/13/A2B_Java/5_Spring_1.html/</id>
    <published>2018-04-13T10:00:00.000Z</published>
    <updated>2018-04-13T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring-的核心"><a href="#1-Spring-的核心" class="headerlink" title="1. Spring 的核心"></a>1. Spring 的核心</h1><h2 id="1-IOC-DI（控制反转-依赖注入）"><a href="#1-IOC-DI（控制反转-依赖注入）" class="headerlink" title="1. IOC/DI（控制反转/依赖注入）"></a>1. IOC/DI（控制反转/依赖注入）</h2><p>注入方式： set方法、构造器、工厂方法</p><h2 id="2-AOP（面向切面编程）"><a href="#2-AOP（面向切面编程）" class="headerlink" title="2. AOP（面向切面编程）"></a>2. AOP（面向切面编程）</h2><p>使用的是动态代理，通过 JDK（接口实现） 或 CGLib 字节码工具包的继承来实现动态代理</p><h1 id="2-Bean-的生命周期"><a href="#2-Bean-的生命周期" class="headerlink" title="2. Bean 的生命周期"></a>2. Bean 的生命周期</h1><h2 id="1-实例化-Bean"><a href="#1-实例化-Bean" class="headerlink" title="1. 实例化 Bean"></a>1. 实例化 Bean</h2><p>对于 BeanFactory 容器，是懒实例；而 ApplicationiContext 容器则是容器启动时就会实例化所有的 Bean</p><h2 id="2-设置对象属性（依赖注入）"><a href="#2-设置对象属性（依赖注入）" class="headerlink" title="2. 设置对象属性（依赖注入）"></a>2. 设置对象属性（依赖注入）</h2><p>Spring 通过 BeanDefinition 中的信息进行依赖注入</p><h2 id="3-注入-Aware-接口"><a href="#3-注入-Aware-接口" class="headerlink" title="3. 注入 Aware 接口"></a>3. 注入 Aware 接口</h2><p>Spring 检查独享是否实现了 XXXAware 接口，并调用相应的方法</p><h2 id="4-BeanPostProcessor"><a href="#4-BeanPostProcessor" class="headerlink" title="4. BeanPostProcessor"></a>4. BeanPostProcessor</h2><p>通过 BeanPostProcessor 接口的 postProcessBeforeInitialzation 方法，在 Bean 初始化前做调用，也称为前置处理（Aware 接口就是在这里完成注入的）<br>postProcessAfterInitialzation 方法在 Bean 初始化之后进行调用，也称为后置处理</p><h2 id="5-InitialzingBean-与-init-method"><a href="#5-InitialzingBean-与-init-method" class="headerlink" title="5. InitialzingBean 与 init-method"></a>5. InitialzingBean 与 init-method</h2><p>Initializing 只有一个 afterPropertiesSet() 方法，在 Bean 初始化前做调用，和前置处理唯一区别是不会对 Bean 本身处理（Bean 不被参数传递）<br>同样功能在配置文件为 init-method</p><h2 id="6-DisposableBean-和-destroy-method"><a href="#6-DisposableBean-和-destroy-method" class="headerlink" title="6. DisposableBean 和 destroy-method"></a>6. DisposableBean 和 destroy-method</h2><p>Bean 被清理之前调用 DisposableBean 接口的 destroy() 方法<br>同样功能在配置文件为 destroy-method</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Spring-的核心&quot;&gt;&lt;a href=&quot;#1-Spring-的核心&quot; class=&quot;headerlink&quot; title=&quot;1. Spring 的核心&quot;&gt;&lt;/a&gt;1. Spring 的核心&lt;/h1&gt;&lt;h2 id=&quot;1-IOC-DI（控制反转-依赖注入）&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Java 拾遗" scheme="http://www.liwenguang.cn/categories/Java-%E6%8B%BE%E9%81%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Servlet_Filter_Listener</title>
    <link href="http://www.liwenguang.cn/2018/04/12/A2B_Java/2_Servlet_Filter_Listener.html/"/>
    <id>http://www.liwenguang.cn/2018/04/12/A2B_Java/2_Servlet_Filter_Listener.html/</id>
    <published>2018-04-12T15:00:00.000Z</published>
    <updated>2018-04-12T17:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-web-xml-的加载顺序"><a href="#1-web-xml-的加载顺序" class="headerlink" title="1. web.xml 的加载顺序"></a>1. web.xml 的加载顺序</h1><p>ServletContext -&gt; context-param -&gt; listener -&gt; filter -&gt; servlet。<br>前面的两个用于在 web.xml 设置变量，重要的是后面三个，即 Listener、Filter、Servlet，为 javaweb 的三大组件。</p><h1 id="2-Listener"><a href="#2-Listener" class="headerlink" title="2. Listener"></a>2. Listener</h1><ol><li>ServletContext 的监听器：ServletContextListener</li><li>HttpSession 的监听器：HttpSessionListener</li><li>ServletRequest 的监听器：ServletRequestListener</li></ol><blockquote><p>其中 Spring MVC 中 web.xml 常见配置的<br><code>org.springframework.web.context.request.RequestContextListener</code> 就是实现了 <code>ServletRequestListener</code> 用于监听每次请求。<br><code>org.springframework.web.context.ContextLoaderListener</code> 就是实现了 <code>ServletContextListener</code> 用于监听 ServletContext 的创建（即容器的启动），进而初始化 Spring 容器。</p></blockquote><h1 id="3-Filter"><a href="#3-Filter" class="headerlink" title="3. Filter"></a>3. Filter</h1><ol><li>Filter 和 Servlet 类似也有三个生命周期方法，init、doFilter、destroy 三个。  </li><li>Filter 是对多个请求进行拦截处理放行的，可以有多个 Filter。  </li><li>如果某个请求匹配到了多个过滤器，则根据 filter-mapping 的顺序进行过滤</li></ol><blockquote><p>其中 Spring MVC 中 web.xml 常见配置的 <code>org.springframework.web.filter.CharacterEncodingFilter</code> 就是实现了 <code>Filter</code> 用于每次过滤的字符编码设置</p></blockquote><h1 id="4-Servlet"><a href="#4-Servlet" class="headerlink" title="4. Servlet"></a>4. Servlet</h1><ol><li>Servlet 用于处理客户端匹配的请求，获取请求，处理请求，返回响应。</li><li>三个生命周期方法，init、service、destroy。</li><li><code>&lt;load-on-startup&gt;</code> 如果是非负整数或零时，Servlet 容器先加载数值小的 servlet；如果是负数则 Servlet 容器将在首次访问时加载（懒汉模式）。</li><li>Servlet 属于单例，多个请求可能会请求同一个 Servlet，即一个类只有一个对象，类由我们编写并写入 web.xml 配置中，但对象由容器创建，由容器调用相应的方法。</li></ol><blockquote><p>其中 Spring MVC 中 web.xml 常见配置的 <code>org.springframework.web.servlet.DispatcherServlet</code> 就是继承了 <code>HttpServlet</code> 用于每次用户的请求。</p></blockquote><h1 id="5-Spring-容器启动"><a href="#5-Spring-容器启动" class="headerlink" title="5. Spring 容器启动"></a>5. Spring 容器启动</h1><p>下面是 web.xml 的常见配置：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></div><div class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></div><div class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></div><div class="line">            classpath:applicationContext.xml</div><div class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p><ol><li>创建 ServletContext 上下文并将 <code>context-param</code> 属性写入此上下文。</li><li>执行 <code>ContextLoaderListener</code> 将 Spring 的上下文 <code>WebApplicationContext</code> 写入 ServletContext 用于 Servlet 容器共享，接着读取 context-param 节点（已经被加载了）的 <code>contextConfigLocation</code> 解析 xml 并创建 Spring 容器和初始化。</li><li>执行 <code>CharacterEncodingFilter</code> 过滤器设置相应设置，用于以后的每次请求。</li><li>执行 <code>DispatcherServlet</code> 用于 Servlet 的创建（根据 load-on-startup）。</li></ol><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><p>三大组件参考：<a href="https://blog.csdn.net/xiaojie119120/article/details/73274759" target="_blank" rel="external">https://blog.csdn.net/xiaojie119120/article/details/73274759</a><br>Spring 容器启动参考：<a href="https://blog.csdn.net/u013510838/article/details/75066884" target="_blank" rel="external">https://blog.csdn.net/u013510838/article/details/75066884</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-web-xml-的加载顺序&quot;&gt;&lt;a href=&quot;#1-web-xml-的加载顺序&quot; class=&quot;headerlink&quot; title=&quot;1. web.xml 的加载顺序&quot;&gt;&lt;/a&gt;1. web.xml 的加载顺序&lt;/h1&gt;&lt;p&gt;ServletContext -
      
    
    </summary>
    
      <category term="Java 拾遗" scheme="http://www.liwenguang.cn/categories/Java-%E6%8B%BE%E9%81%97/"/>
    
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap</title>
    <link href="http://www.liwenguang.cn/2018/04/12/A2B_Java/1_ConcurrentHashMap.html/"/>
    <id>http://www.liwenguang.cn/2018/04/12/A2B_Java/1_ConcurrentHashMap.html/</id>
    <published>2018-04-12T15:00:00.000Z</published>
    <updated>2018-04-12T17:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java7-的-ConcurrentHashMap"><a href="#java7-的-ConcurrentHashMap" class="headerlink" title="java7 的 ConcurrentHashMap"></a>java7 的 ConcurrentHashMap</h1><p>在构造函数就初始化了 Segment<br>使用 Segment 可重入分段锁 + 链表结构的 HashEntry</p><h2 id="Segment"><a href="#Segment" class="headerlink" title="Segment"></a>Segment</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</div><div class="line">        <span class="comment">// 如果是多处理器则是 64，否则是 1 次</span></div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SCAN_RETRIES =</div><div class="line">            Runtime.getRuntime().availableProcessors() &gt; <span class="number">1</span> ? <span class="number">64</span> : <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</div><div class="line">            <span class="comment">// put 的时候，通过 scanAndLockForPut 自旋锁，for 循环 64/1 次尝试获取锁，如果一直没获取到，则 lock() 将自己挂起，然后等待 put 完之后的 unlock() 将自己唤醒</span></div><div class="line">            HashEntry&lt;K,V&gt; node = tryLock() ? <span class="keyword">null</span> :</div><div class="line">                scanAndLockForPut(key, hash, value);</div><div class="line">            V oldValue;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                HashEntry&lt;K,V&gt;[] tab = table;</div><div class="line">                <span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</div><div class="line">                HashEntry&lt;K,V&gt; first = entryAt(tab, index);</div><div class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</div><div class="line">                    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">                        K k;</div><div class="line">                        <span class="keyword">if</span> ((k = e.key) == key ||</div><div class="line">                            (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class="line">                            oldValue = e.value;</div><div class="line">                            <span class="keyword">if</span> (!onlyIfAbsent) &#123;</div><div class="line">                                e.value = value;</div><div class="line">                                ++modCount;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        e = e.next;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (node != <span class="keyword">null</span>)</div><div class="line">                            node.setNext(first);</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class="line">                        <span class="keyword">int</span> c = count + <span class="number">1</span>;</div><div class="line">                        <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class="line">                            rehash(node);</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            setEntryAt(tab, index, node);</div><div class="line">                        ++modCount;</div><div class="line">                        count = c;</div><div class="line">                        oldValue = <span class="keyword">null</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                unlock();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</div><div class="line">        <span class="keyword">int</span> size;</div><div class="line">        <span class="keyword">boolean</span> overflow; </div><div class="line">        <span class="keyword">long</span> sum;         </div><div class="line">        <span class="keyword">long</span> last = <span class="number">0L</span>;   </div><div class="line">        <span class="keyword">int</span> retries = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 获取 size 时，先进行三次无锁 CAS 的合并计算，如果前后两次相同则返回结果，如果前后两次都不一样则再对每个 Segment 加锁后获取 size 进行合并</span></div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</div><div class="line">                        ensureSegment(j).lock();</div><div class="line">                &#125;</div><div class="line">                sum = <span class="number">0L</span>;</div><div class="line">                size = <span class="number">0</span>;</div><div class="line">                overflow = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</div><div class="line">                    Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class="line">                    <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123;</div><div class="line">                        sum += seg.modCount;</div><div class="line">                        <span class="keyword">int</span> c = seg.count;</div><div class="line">                        <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</div><div class="line">                            overflow = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (sum == last)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                last = sum;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</div><div class="line">                    segmentAt(segments, j).unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="java8-的-ConcurrentHashMap"><a href="#java8-的-ConcurrentHashMap" class="headerlink" title="java8 的 ConcurrentHashMap"></a>java8 的 ConcurrentHashMap</h1><p>在 put 的时候构造 Node<br>使用 Node + CAS + Synchronized</p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">    <span class="keyword">final</span> K key;</div><div class="line">    <span class="keyword">volatile</span> V val;</div><div class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Virtualized support for map.get(); overridden in subclasses.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                K ek;</div><div class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</div><div class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</div><div class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</div><div class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</div><div class="line">        <span class="comment">// 初始化 Node</span></div><div class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">            tab = initTable();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 如果该 Node 节点未初始化则通过 CAS 插入数据</span></div><div class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</div><div class="line">                            <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</div><div class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</div><div class="line">            tab = helpTransfer(tab, f);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 如果该 Node 下有数据，进行链表插入则使用 synchronized</span></div><div class="line">            V oldVal = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        binCount = <span class="number">1</span>;</div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class="line">                            K ek;</div><div class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                                ((ek = e.key) == key ||</div><div class="line">                                    (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</div><div class="line">                                oldVal = e.val;</div><div class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                                    e.val = value;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                            Node&lt;K,V&gt; pred = e;</div><div class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</div><div class="line">                                                            value, <span class="keyword">null</span>);</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 如果该节点是红黑树结构</span></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">                        Node&lt;K,V&gt; p;</div><div class="line">                        binCount = <span class="number">2</span>;</div><div class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class="line">                                                        value)) != <span class="keyword">null</span>) &#123;</div><div class="line">                            oldVal = p.val;</div><div class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                                p.val = value;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// 判断该链表长度是否是 8 ，进行红黑树处理</span></div><div class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</div><div class="line">                    treeifyBin(tab, i);</div><div class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> oldVal;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 通过 binCount 判断是否是插入新数据还是更新数据，来更新数据 size baseCount</span></div><div class="line">    addCount(<span class="number">1L</span>, binCount);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>获取 size 通过 baseCount 和 CounterCell 数组。其中每次 put 都会进行更新 baseCount 和 CounterCell，但是对其中不懂。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>分段锁虽然好，但是获取 size 复杂<br>在 jdk7 中：</p><ol><li>put 先采用 64 次自旋锁，获取不到再进行挂起自己等待 put 完唤醒  </li><li>size() 则是采用三次尝试无锁操作，如果 size 不一致才对每个 Segment 加锁获取 size</li></ol><p>在 jdk8 中：</p><ol><li>put 如果是新数据则使用 CAS 插入，如果是链表已有数据则使用 synchronized，如果一个 Node 链表超过 8 个就会变成红黑树，避免了 HashDos 攻击，最后统计 size</li><li>size() 直接获取 size</li></ol><p>参考：<a href="https://www.jianshu.com/p/e694f1e868ec" target="_blank" rel="external">https://www.jianshu.com/p/e694f1e868ec</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java7-的-ConcurrentHashMap&quot;&gt;&lt;a href=&quot;#java7-的-ConcurrentHashMap&quot; class=&quot;headerlink&quot; title=&quot;java7 的 ConcurrentHashMap&quot;&gt;&lt;/a&gt;java7 的 Con
      
    
    </summary>
    
      <category term="Java 拾遗" scheme="http://www.liwenguang.cn/categories/Java-%E6%8B%BE%E9%81%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Jboot_2</title>
    <link href="http://www.liwenguang.cn/2018/01/10/tech/Jboot_2.html/"/>
    <id>http://www.liwenguang.cn/2018/01/10/tech/Jboot_2.html/</id>
    <published>2018-01-10T04:00:00.000Z</published>
    <updated>2018-01-12T10:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-启动流程"><a href="#0-启动流程" class="headerlink" title="0 启动流程"></a>0 启动流程</h1><ol><li>解析启动参数，打印 logo。</li><li>通过工厂对配置进行判断获取相应的应用服务器（默认 undertow）。</li><li>判断是否是开发模式（默认），如果是则定期对文件进行扫描（3 * 1010）。</li><li>回调各个 listener 的 onJbootStarted() 方法。</li></ol><h1 id="1-如何使用-main-文件启动一个应用服务器？"><a href="#1-如何使用-main-文件启动一个应用服务器？" class="headerlink" title="1 如何使用 main 文件启动一个应用服务器？"></a>1 如何使用 main 文件启动一个应用服务器？</h1><p>如果你会使用，可以直接跳过这节。</p><p>pom.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.8.v20171121<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.8.v20171121<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>SimpleServer.java:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleServer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="string">"0.0.0.0"</span>, <span class="number">8081</span>);</div><div class="line">        Server server = <span class="keyword">new</span> Server(address);</div><div class="line">        ResourceHandler handler = <span class="keyword">new</span> ResourceHandler();</div><div class="line">        handler.setDirectoriesListed(<span class="keyword">true</span>);</div><div class="line">        handler.setResourceBase(<span class="string">"/Users/liwenguang/Downloads"</span>);</div><div class="line">        server.setHandler(handler);</div><div class="line">        server.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>参考资料：<a href="http://blog.csdn.net/kiterunner/article/details/51695293" target="_blank" rel="external">http://blog.csdn.net/kiterunner/article/details/51695293</a></p><h1 id="2-Jboot-启动精简版"><a href="#2-Jboot-启动精简版" class="headerlink" title="2 Jboot 启动精简版"></a>2 Jboot 启动精简版</h1><p>Jboot.java 主文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jboot</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JbootServer jbootServer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">        ensureServerCreated();</div><div class="line">        <span class="keyword">if</span> (!startServer()) &#123;</div><div class="line">            System.err.println(<span class="string">"jboot start fail!!!"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureServerCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (jbootServer == <span class="keyword">null</span>) &#123;</div><div class="line">            JbootServerFactory factory = JbootServerFactory.me();</div><div class="line">            jbootServer = factory.buildServer();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">startServer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jbootServer.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Jboot().start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>JbootServer 抽象类，方便各种应用服务器的工厂创建，其中作者只编写了 undertow 和 jetty 的实现。（可知作者对 tomcat 不大喜欢）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JbootServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">restart</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">stop</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">JbootServerFactory 工厂类：</div><div class="line">```java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JbootServerFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JbootServerFactory me = <span class="keyword">new</span> JbootServerFactory();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JbootServerFactory <span class="title">me</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> me;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> JbootServer <span class="title">buildServer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// switch </span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JettyServer();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接着是应用服务器的配置文件， JbootServerConfig：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JbootServerConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_UNDERTOW = <span class="string">"undertow"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_TOMCAT = <span class="string">"tomcat"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_JETTY = <span class="string">"jetty"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String type = TYPE_UNDERTOW;</div><div class="line">    <span class="keyword">private</span> String host = <span class="string">"0.0.0.0"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">8080</span>;</div><div class="line">    <span class="keyword">private</span> String contextPath = <span class="string">"/"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// set/get 省略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后是实现的 Jetty 应用服务器， JettyServer：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JettyServer</span> <span class="keyword">extends</span> <span class="title">JbootServer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Log log = Log.getLog(JettyServer.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JbootServerConfig config;</div><div class="line">    <span class="comment">// private JbootWebConfig webConfig;</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Server jettyServer;</div><div class="line">    <span class="keyword">private</span> ServletContextHandler handler;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JettyServer</span><span class="params">()</span> </span>&#123;</div><div class="line">        config = <span class="keyword">new</span> JbootServerConfig();</div><div class="line">        <span class="comment">// webConfig = Jboot.config(JbootWebConfig.class);</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            initJettyServer();</div><div class="line">            <span class="comment">// JbootAppListenerManager.me().onAppStartBefore(this);</span></div><div class="line">            jettyServer.start();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            log.error(ex.toString(), ex);</div><div class="line">            stop();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initJettyServer</span><span class="params">()</span> </span>&#123;</div><div class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(config.getHost(), config.getPort());</div><div class="line">        jettyServer = <span class="keyword">new</span> Server(address);</div><div class="line"></div><div class="line">        handler = <span class="keyword">new</span> ServletContextHandler();</div><div class="line">        handler.setContextPath(config.getContextPath());</div><div class="line">        handler.setClassLoader(<span class="keyword">new</span> JbootServerClassloader(JettyServer.class.getClassLoader()));</div><div class="line">        handler.setResourceBase(getRootClassPath());</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        增加 shiro 全局过滤器</span></div><div class="line"><span class="comment">        JbootShiroConfig shiroConfig = Jboot.config(JbootShiroConfig.class);</span></div><div class="line"><span class="comment">        if (shiroConfig.isConfigOK()) &#123;</span></div><div class="line"><span class="comment">            handler.addEventListener(new EnvironmentLoaderListener());</span></div><div class="line"><span class="comment">            handler.addFilter(ShiroFilter.class, "/*", EnumSet.of(DispatcherType.REQUEST));</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        增加 Jfinal Handler，Jboot 基于 Jfinal</span></div><div class="line"><span class="comment">        //JFinal</span></div><div class="line"><span class="comment">        FilterHolder jfinalFilter = handler.addFilter(JFinalFilter.class, "/*", EnumSet.of(DispatcherType.REQUEST));</span></div><div class="line"><span class="comment">        jfinalFilter.setInitParameter("configClass", Jboot.me().getJbootConfig().getJfinalConfig());</span></div><div class="line"><span class="comment">        增加 Hystrix 监控 servlet</span></div><div class="line"><span class="comment">        JbootHystrixConfig hystrixConfig = Jboot.config(JbootHystrixConfig.class);</span></div><div class="line"><span class="comment">        if (StringUtils.isNotBlank(hystrixConfig.getUrl())) &#123;</span></div><div class="line"><span class="comment">            handler.addServlet(HystrixMetricsStreamServlet.class, hystrixConfig.getUrl());</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        增加 metric 监控</span></div><div class="line"><span class="comment">        JbootMetricConfig metricsConfig = Jboot.config(JbootMetricConfig.class);</span></div><div class="line"><span class="comment">        if (StringUtils.isNotBlank(metricsConfig.getUrl())) &#123;</span></div><div class="line"><span class="comment">            handler.addEventListener(new JbootMetricServletContextListener());</span></div><div class="line"><span class="comment">            handler.addEventListener(new JbootHealthCheckServletContextListener());</span></div><div class="line"><span class="comment">            handler.addServlet(AdminServlet.class, metricsConfig.getUrl());</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line"><span class="comment">        最后增加 Jboot 本身的 servlet</span></div><div class="line"><span class="comment">        io.jboot.server.Servlets jbootServlets = new io.jboot.server.Servlets();</span></div><div class="line"><span class="comment">        ContextListeners listeners = new ContextListeners();</span></div><div class="line"><span class="comment">        JbootAppListenerManager.me().onJbootDeploy(jbootServlets, listeners);</span></div><div class="line"><span class="comment">        for (Map.Entry&lt;String, io.jboot.server.Servlets.ServletInfo&gt; entry : jbootServlets.getServlets().entrySet()) &#123;</span></div><div class="line"><span class="comment">            for (String path : entry.getValue().getUrlMapping()) &#123;</span></div><div class="line"><span class="comment">                handler.addServlet(entry.getValue().getServletClass(), path);</span></div><div class="line"><span class="comment">            &#125;</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line"><span class="comment">        事件监听</span></div><div class="line"><span class="comment">        for (Class&lt;? extends ServletContextListener&gt; listenerClass : listeners.getListeners()) &#123;</span></div><div class="line"><span class="comment">            handler.addEventListener(ClassKits.newInstance(listenerClass));</span></div><div class="line"><span class="comment">        &#125;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        */</span></div><div class="line">        jettyServer.setHandler(handler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getRootClassPath</span><span class="params">()</span> </span>&#123;</div><div class="line">        String path = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            path = JettyServer.class.getClassLoader().getResource(<span class="string">""</span>).toURI().getPath();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> File(path).getAbsolutePath();</div><div class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> path;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">restart</span><span class="params">()</span> </span>&#123;</div><div class="line">        stop();</div><div class="line">        start();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jettyServer.stop();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            log.error(ex.toString(), ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后是自定义 ClassLoader，JbootServerClassLoader：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JbootServerClassloader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JbootServerClassloader</span><span class="params">(ClassLoader parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(parent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>自定义 ClassLoader 在应用服务器中都会自定义，用于文件的隔离和热更新。  </p><p>目录结构如下：<br><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/others/jboot_start_server_demo.png" alt=""></p><h1 id="3-启动到底启动了什么"><a href="#3-启动到底启动了什么" class="headerlink" title="3 启动到底启动了什么"></a>3 启动到底启动了什么</h1><h2 id="1-参数解析"><a href="#1-参数解析" class="headerlink" title="1. 参数解析"></a>1. 参数解析</h2><p>类似 JVM options 的 -Dxxx=xxx 参数的作用，用于全局访问，Jboot 将启动参数使用 Jboot.setBootArg() 放在了一个 Map 中，你可以使用 Jboot.getBootArg() 获取。<br>Jboot.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseArgs</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (args == <span class="keyword">null</span> || args.length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (String arg : args) &#123;</div><div class="line">            <span class="keyword">int</span> indexOf = arg.indexOf(<span class="string">"="</span>);</div><div class="line">            <span class="keyword">if</span> (arg.startsWith(<span class="string">"--"</span>) &amp;&amp; indexOf &gt; <span class="number">0</span>) &#123;</div><div class="line">                String key = arg.substring(<span class="number">2</span>, indexOf);</div><div class="line">                String value = arg.substring(indexOf + <span class="number">1</span>);</div><div class="line">                setBootArg(key, value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h2 id="2-判断启动模式"><a href="#2-判断启动模式" class="headerlink" title="2. 判断启动模式"></a>2. 判断启动模式</h2><p>默认为 dev 模式，查看 JbootConfig.java 文件可知，但是我们可能为想，我们怎么才能设置启动模式呢？  </p><p>没错，使用启动参数！请看 JbootConfigManager 文件，该文件是用于读取配置文件，你可能会想，为什么配置文件都加了 <code>@PropertyConfig(prefix = &quot;&quot;)</code> 这样的注解呢，其实，这是作者为了方便 JavaBean 与 参数 进行转换。直接上代码：  </p><p>第一种：启动参数，如下图：<br><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/others/jboot_start_server_args.png" alt=""><br>我们配置了两个参数（对照 JbootConfig 你就知道，只有 mode 有 set 方法，而 version 是只有 get 方法的）。<br>最后启动 debug 的时候你就会发现 Jboot.isDevMode() 方法返回 false 而不是默认的 true。 </p><blockquote><p>有很多地方判断了，如果是 dev 模式，则会打印一些参数，例如 JbootEventManager 方法。</p></blockquote><p>第二种：使用 <code>Jboot.setBootArg(&quot;jboot.mode&quot;, &quot;test&quot;);</code> 这种，从前面的 <strong>参数解析</strong> 一节我们已经知道，其实启动参数底层使用的就是 setBootArg 方法。</p><blockquote><p>测试类中很多使用了这种方法，例如 <code>DubboClientZookeeperDemo</code>。</p></blockquote><p>如果是 dev 模式，就会定时 3 秒扫描应用服务器文件夹，但是作者注释了，这里不懂作者的意思。<br>AutoDeployManager.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        File file = <span class="keyword">new</span> File(PathKit.getRootClassPath());</div><div class="line">        JbootFileScanner scanner = <span class="keyword">new</span> JbootFileScanner(file.getAbsolutePath(), <span class="number">3</span>) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(String action, String file)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//                    System.err.println("file changes : " + file);</span></div><div class="line"><span class="comment">//                    Jboot.me().getServer().restart();</span></div><div class="line"><span class="comment">//                    JbootServerFactory.me().buildServer().start();</span></div><div class="line"><span class="comment">//                    System.err.println("Loading complete.");</span></div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    System.err.println(<span class="string">"Error reconfiguring/restarting webapp after change in watched files"</span>);</div><div class="line">                    LogKit.error(e.getMessage(), e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        scanner.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h2 id="3-回调所有-JbootAppListener-实现类的-onJbootStarted-方法"><a href="#3-回调所有-JbootAppListener-实现类的-onJbootStarted-方法" class="headerlink" title="3. 回调所有 JbootAppListener 实现类的 onJbootStarted()方法"></a>3. 回调所有 JbootAppListener 实现类的 onJbootStarted()方法</h2><p>在 Jboot 启动的最后一步，实例化了 JbootAppListenerManager 类：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="title">JbootAppListenerManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 扫描获取所有 JbootAppListener 的子类</span></div><div class="line">    List&lt;Class&lt;JbootAppListener&gt;&gt; allListeners = ClassScanner.scanSubClass(JbootAppListener.class, <span class="keyword">true</span>);</div><div class="line">    <span class="keyword">if</span> (allListeners == <span class="keyword">null</span> || allListeners.size() == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 去除 JbootAppListenerManager 本身</span></div><div class="line">    <span class="keyword">for</span> (Class&lt;? extends JbootAppListener&gt; clazz : allListeners) &#123;</div><div class="line">        <span class="keyword">if</span> (JbootAppListenerManager.class == clazz || JbootAppListenerBase.class == clazz) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 实例化</span></div><div class="line">        JbootAppListener listener = ClassKits.newInstance(clazz, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">            listeners.add(listener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onJbootStarted</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (JbootAppListener listener : listeners) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            listener.onJbootStarted();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            log.error(ex.toString(), ex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>并通过 <code>JbootAppListenerManager.me().onJbootStarted();</code> 回调了 <code>onJbootStarted()</code> 方法，来调用用户的逻辑。</p><h1 id="4-其它"><a href="#4-其它" class="headerlink" title="4 其它"></a>4 其它</h1><ol><li>从一些 Manager 方法看的出作者习惯通过构造方法进行一些必要的初始化，我以前看的 《架构探险——从零开始写Java Web框架》 则喜欢用静态块进行初始化。  </li><li>启动的一些细节需要大家去 debug 一步一步看，看懂了也是很高兴的，毕竟作者也是大牛，更近了一步。  </li><li>作者代码习惯方法名由于注释。说实话初看有点不习惯，因为习惯看注释了，但是作者方法名真的能让你可以不用注释（除却一些必要方法作者加了注释）。</li><li>jbootfly 是入门，不要想直接看源码，欲速则不达。</li><li>你要懂 jfinal 的知识，至少看过 jfinal 文档，写过 jfinal 经典的 blog 项目。</li></ol><h2 id="如果有错误，请指出，谢谢，共勉。"><a href="#如果有错误，请指出，谢谢，共勉。" class="headerlink" title="如果有错误，请指出，谢谢，共勉。"></a>如果有错误，请指出，谢谢，共勉。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-启动流程&quot;&gt;&lt;a href=&quot;#0-启动流程&quot; class=&quot;headerlink&quot; title=&quot;0 启动流程&quot;&gt;&lt;/a&gt;0 启动流程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;解析启动参数，打印 logo。&lt;/li&gt;
&lt;li&gt;通过工厂对配置进行判断获取相应的应用服务器（默
      
    
    </summary>
    
      <category term="小结" scheme="http://www.liwenguang.cn/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Jboot_1</title>
    <link href="http://www.liwenguang.cn/2018/01/10/tech/Jboot_1.html/"/>
    <id>http://www.liwenguang.cn/2018/01/10/tech/Jboot_1.html/</id>
    <published>2018-01-10T04:00:00.000Z</published>
    <updated>2018-01-12T10:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jboot的入门demo —— JbooFly。</p><hr><h1 id="1-项目组成"><a href="#1-项目组成" class="headerlink" title="1 项目组成"></a>1 项目组成</h1><p>后端基础框架：Jboot1.2.7<br>前端基础框架：Fly Template 社区模版<br>界面渲染框架：JFinal Template Engine</p><h1 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2 数据库"></a>2 数据库</h1><p>使用 Mysql，一共有七张表，暂时使用的只有六张表，即文章分类表、评论表、文章表、用户表、用户行为表、用户收藏表。用户消息表没有用上。</p><h1 id="3-前端页面"><a href="#3-前端页面" class="headerlink" title="3 前端页面"></a>3 前端页面</h1><p>1. 社区首页：外层架子（_layout.html），分类导航（_navigation.html），置顶文章（_top_posts.html），内容列表（content()），右边四个小页面（_signin_panel/_recommend/_hot_posts/_links）</p><ol><li>个人页面：外层架子，左侧导航（_user_left_menu.html），我的主页（index.html），我的帖子（post.html/collection.html），基本设置（setting.html），我的消息（message.html），账号激活（activate.html）</li></ol><h1 id="4-定时任务"><a href="#4-定时任务" class="headerlink" title="4 定时任务"></a>4 定时任务</h1><ol><li><p>文章浏览量，一分钟一次。使用了 <code>ConcurrentHashMap</code> + <code>AtomicLong</code> 的方式处理线程问题。最后更新缓存（默认缓存开启并有五种）：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * name: io.jboot.core.cache.JbootCacheConfig</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_EHCACHE = <span class="string">"ehcache"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_REDIS = <span class="string">"redis"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_EHREDIS = <span class="string">"ehredis"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_NONE_CACHE = <span class="string">"none"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_J2CACHE = <span class="string">"j2cache"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> String type = TYPE_EHCACHE;</div><div class="line">    ......</div></pre></td></tr></table></figure></li><li><p>文章评论量，和文章浏览量一样的业务逻辑。</p></li></ol><h1 id="5-Caffeine-缓存使用"><a href="#5-Caffeine-缓存使用" class="headerlink" title="5 Caffeine 缓存使用"></a>5 Caffeine 缓存使用</h1><ol><li>签到缓存：SigninManager，缓存用户以及签到时间的映射关系，过期时间为两小时。</li><li>消息缓存：MessageManager，作者未开发完，猜测是缓存用户以及用户未读消息的映射关系。</li></ol><h1 id="6-拦截器"><a href="#6-拦截器" class="headerlink" title="6 拦截器"></a>6 拦截器</h1><ol><li>全局强制拦截器 UserIntercepor ，每次请求服务，都会使用解密算法查看存储在 cookie 中的用户信息，并获取该用户的签到缓存以及消息缓存信息。</li><li>ajax api 强制拦截器 ApiNeedUser。</li><li>页面强制拦截器 NeedUser。</li></ol><h1 id="7-本地事件"><a href="#7-本地事件" class="headerlink" title="7 本地事件"></a>7 本地事件</h1><ol><li>用户注册事件监听 UserRegister ，作者未开发完，猜测应该是用户注册后发送邮件或者验证码，抑或是通知版主？</li></ol><h1 id="8-JFinal"><a href="#8-JFinal" class="headerlink" title="8 JFinal"></a>8 JFinal</h1><ol><li>JFinal Template Engine，查看 JFinal 自定义指令文档即可。主要是 directive 下的文件。</li></ol><h1 id="9-目的"><a href="#9-目的" class="headerlink" title="9 目的"></a>9 目的</h1><p>猜测应该是 JBoot 论坛。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jboot的入门demo —— JbooFly。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;1-项目组成&quot;&gt;&lt;a href=&quot;#1-项目组成&quot; class=&quot;headerlink&quot; title=&quot;1 项目组成&quot;&gt;&lt;/a&gt;1 项目组成&lt;/h1&gt;&lt;p&gt;后端基础框架：Jboot1.2.
      
    
    </summary>
    
      <category term="小结" scheme="http://www.liwenguang.cn/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 总结</title>
    <link href="http://www.liwenguang.cn/2017/12/31/talker/mind_1.html/"/>
    <id>http://www.liwenguang.cn/2017/12/31/talker/mind_1.html/</id>
    <published>2017-12-31T14:58:00.000Z</published>
    <updated>2017-12-31T14:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>书在 10.1 之后明显看的比以前多了，学的也比以前更多了，<br>看完书才发现，其实书籍比博客对初学者更友好，因为书是一个只是的体系，<br>它会完整的介绍某个技术，而不像博客，毕竟博客只有那么长，书却是一本，<br>感觉对我而言，书籍适合技术沉淀，博客适合应对工作。<br>但是，博客比书看的更轻松。<br>另外，虽然说有的书应该看第二遍，但是我个人觉得，<br>我现在应该多看点书，然后再从某些精华书选出值得看第二遍的书。<br>最近一个星期感觉看书看不进去，因此准备新年换个方式看书，<br>原来是一个章节一个章节的读，原因在于，我以前没尝试完完整整的读完一本书。<br>新的伪一年，截止到真正意义上的过年前，我尝试看书只写一篇笔记，<br>如果是偏代码的书籍，我会建议一个项目，并将思维导图以及代码放在 <code>github</code>，<br>这样一本书就变成了一个图和代码库，而本博客也变成总结的以及写些自己的感想，<br>例如，读书感想，以及在不同的技术点应该看什么书，当然，肯定是以我自己为准，<br>不然我都没看过，就介绍，那不就尴尬吗，而且有的书，是需要有某些技术的基础看的才会学习的更快。<br>新的一年，希望自己能朝着自己想要的方向发展。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书在 10.1 之后明显看的比以前多了，学的也比以前更多了，&lt;br&gt;看完书才发现，其实书籍比博客对初学者更友好，因为书是一个只是的体系，&lt;br&gt;它会完整的介绍某个技术，而不像博客，毕竟博客只有那么长，书却是一本，&lt;br&gt;感觉对我而言，书籍适合技术沉淀，博客适合应对工作。&lt;b
      
    
    </summary>
    
      <category term="闲聊" scheme="http://www.liwenguang.cn/categories/%E9%97%B2%E8%81%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>阻塞队列的低版本实现</title>
    <link href="http://www.liwenguang.cn/2017/12/28/current/1.html/"/>
    <id>http://www.liwenguang.cn/2017/12/28/current/1.html/</id>
    <published>2017-12-28T12:14:00.000Z</published>
    <updated>2017-12-28T12:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在复习阻塞队列时，使用原生的 wait、notify 自己实现的阻塞队列竟然出现超最大长度的问题，有问题的代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimulateBlockingQueue</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 底层队列</span></div><div class="line">    <span class="keyword">private</span> LinkedList list = <span class="keyword">new</span> LinkedList();</div><div class="line"></div><div class="line">    <span class="comment">// 队列数据的上下限</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> minSize = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxSize;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimulateBlockingQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.maxSize = size - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 存数据</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">            <span class="keyword">while</span> (list.size() == <span class="keyword">this</span>.maxSize) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    lock.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            list.add(obj);</div><div class="line">            lock.notify();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取数据</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">            <span class="keyword">while</span> (list.size() == <span class="keyword">this</span>.minSize) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    lock.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            result = list.removeFirst();</div><div class="line">            lock.notify();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">final</span> SimulateBlockingQueue mq = <span class="keyword">new</span> SimulateBlockingQueue(<span class="number">5</span>);</div><div class="line"></div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">                    mq.put(i);</div><div class="line">                    System.out.println(<span class="string">"++增加："</span> + i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"t1"</span>);</div><div class="line">        t1.start();</div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">                    System.out.println(<span class="string">"移除："</span> + mq.get());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"t2"</span>);</div><div class="line">        t2.start();</div><div class="line"></div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后发现不是 list.size() 的问题，是打印的问题，代码改为如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimulateBlockingQueue</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 底层队列</span></div><div class="line">    <span class="keyword">private</span> LinkedList list = <span class="keyword">new</span> LinkedList();</div><div class="line">    <span class="comment">// 原子性</span></div><div class="line">    <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 队列数据的上下限</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> minSize = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxSize;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimulateBlockingQueue</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.maxSize = size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 存数据</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">            <span class="keyword">while</span> (list.size() == <span class="keyword">this</span>.maxSize) &#123;  <span class="comment">// 对比可以使用count</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    lock.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"++++增加："</span> + obj);</div><div class="line">            list.add(obj);</div><div class="line">            count.incrementAndGet();</div><div class="line">            lock.notify();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取数据</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object result;</div><div class="line">        <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">            <span class="keyword">while</span> (list.size() == <span class="keyword">this</span>.minSize) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    lock.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            result = list.removeFirst();</div><div class="line">            System.out.println(<span class="string">"--移除："</span> + result);</div><div class="line">            count.decrementAndGet();</div><div class="line">            lock.notify();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">final</span> SimulateBlockingQueue mq = <span class="keyword">new</span> SimulateBlockingQueue(<span class="number">5</span>);</div><div class="line"></div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">                    mq.put(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"t1"</span>);</div><div class="line">        t1.start();</div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">                    mq.get();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"t2"</span>);</div><div class="line">        t2.start();</div><div class="line"></div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>思路来源：<a href="https://www.jianshu.com/p/99b7ef411988" target="_blank" rel="external">https://www.jianshu.com/p/99b7ef411988</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在复习阻塞队列时，使用原生的 wait、notify 自己实现的阻塞队列竟然出现超最大长度的问题，有问题的代码如下：  &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="并发" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%B9%B6%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>五、创建高性能的索引</title>
    <link href="http://www.liwenguang.cn/2017/12/28/high_performance_MySQL/5.html/"/>
    <id>http://www.liwenguang.cn/2017/12/28/high_performance_MySQL/5.html/</id>
    <published>2017-12-27T16:28:00.000Z</published>
    <updated>2017-12-27T16:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>索引能够轻易将查询性能提高几个数量级，“最优”的索引有时比一个“好的”索引性能要好两个数量级。创建一个真正“最优”的索引经常需要重写查询。</p><h1 id="1-索引基础"><a href="#1-索引基础" class="headerlink" title="1 索引基础"></a>1 索引基础</h1><h2 id="1-1-索引的类型"><a href="#1-1-索引的类型" class="headerlink" title="1.1 索引的类型"></a>1.1 索引的类型</h2><p>在 MySQL 中，索引是在存储引擎层而不是服务器层实现的。所以，并没有统一的索引标准。即使多个存储引擎支持同一种类型的索引，其底层的事先也可能不同。</p><h3 id="1-B-Tree-索引"><a href="#1-B-Tree-索引" class="headerlink" title="1. B-Tree 索引"></a>1. B-Tree 索引</h3><p>InnoDB 本质是“B+Tree”。假设有如下数据表：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> People(</div><div class="line">    last_name  <span class="built_in">varchar</span>(<span class="number">50</span>)    <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    first_name <span class="built_in">varchar</span>(<span class="number">50</span>)    <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    dob        <span class="built_in">date</span>           <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    gender     enum(<span class="string">'m'</span>, <span class="string">'f'</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    <span class="keyword">key</span>(last_name, first_name, dob)</div><div class="line">)</div></pre></td></tr></table></figure><p>对于表中的每一行数据，索引中包含了 last_name、first_name和 dob 列的值，下图显示了该索引是如何组织数据的存储的：<br><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/High_Performance_MySQL/5_1.png" alt=""><br>注：索引对多个值进行排序的依据是<code>CREATE TABLE</code>语句中定义索引时列的顺序。</p><ol><li>全值匹配：指和索引中的所有列进行匹配。</li><li>匹配最左前缀：前面提到的索引可用于查询所有姓为 Allen 的人，即只使用索引的第一列。</li><li>匹配列前缀：例如查找所有以 J 开头的姓的人。这里也只使用了索引的第一列。</li><li>匹配范围值：例如查找姓在 Allen 和 Barrymore 之间的人。</li><li>精确匹配某一列并范围匹配另外一列：查找所有姓为 Allen，并且名字是字母 K 开头的人。即第一列 last_name 全匹配，第二列 first_name 范围匹配。</li><li>只访问索引的查询</li></ol><p>因为索引树的节点是有序的，所以除了按值查找之外，索引还可以用于查询中的<code>ORDER BY</code>操作（按顺序查找）。一般来说，如果 B-Tree 可以按照某种方式查找到值，那么也可以按照这种方式用于排序。所以如果<code>ORDER BY</code>子句满足前面列出的几种查询类型，则这个索引也可以满足对应的排序需求。  </p><p>下面是一些关于 B-Tree 索引的限制：</p><ul><li>如果不是按照索引的最左列开始查找，则无法使用索引。例，上面的例子的索引无法查找名字为 Bill 的人，也无法查找某个特定生日的人，因为这两列都不是最左数据列。类似地，也无法查找姓氏以某个字母结尾的人。这是关于<code>like &#39;%关键字&#39;</code>的知乎讨论：<a href="https://www.zhihu.com/question/52718330?sort=created" target="_blank" rel="external">https://www.zhihu.com/question/52718330?sort=created</a></li><li>不能跳过索引中的列。</li><li>如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查询。</li></ul><p>有些限制并不是 B-Tree 本身导致的，而是 MySQL 优化器和存储引擎使用索引的方式导致的，这部分限制在未来的版本中可能就不再是限制了。</p><h3 id="2-哈希索引"><a href="#2-哈希索引" class="headerlink" title="2. 哈希索引"></a>2. 哈希索引</h3><p>哈希索引（hash index）基于哈希表实现，只有精确匹配索引所有列的查询才有效。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code），哈希码是一个较小的值，并且不同键值的行计算出来的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。  </p><ol><li>哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。不过，访问内存中的行的速度很快，所以大部分情况这一点对性能的影响并不明显。</li><li>哈希索引数据并不是按照索引值顺序存储的，所以也就无法用于排序。</li><li>哈希索引也不支持部分索引列匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。例，在（A,B）建立哈希索引，如果查询只有 A ，则无法使用该索引。</li><li>访问哈希索引的数据非常快，除非有很多哈希冲突。当出现哈希冲突的时候，存储引擎必须遍历链表中所有的行指针。</li></ol><p>当字段过大，例如存储 URL 时，可以额外使用一个列，用于存储该列的哈希，用于排序。但为了避免哈希冲突的问题，需要<code>where url = &#39;http://www.mysql.com&#39; AND url_crc=CRC32(&#39;http://www.mysql.com&#39;)</code>，这样的性能会非常高。（可以使用触发器来自身插入哈希列）。</p><h3 id="3-空间数据索引（R-Tree）"><a href="#3-空间数据索引（R-Tree）" class="headerlink" title="3. 空间数据索引（R-Tree）"></a>3. 空间数据索引（R-Tree）</h3><p>MyISAM 表支持空间索引。</p><h3 id="4-全文索引"><a href="#4-全文索引" class="headerlink" title="4. 全文索引"></a>4. 全文索引</h3><p>使用<code>MATCH AGAINST</code>操作，而不是普通的<code>WHERE</code>。</p><h1 id="2-索引的优点"><a href="#2-索引的优点" class="headerlink" title="2 索引的优点"></a>2 索引的优点</h1><p>最常见的 B-Tree 索引，按照顺序存储数据，所以 MySQL 可以用来做 <code>ORDER BY</code> 和 <code>GROUP BY</code> 操作。因为数据时有序的，所以 B-Tree 也就会将相关的列值都存储在一起。最后，因为索引中存储了实际的列值，所以某些查询只使用索引就能够完成全部查询：  </p><ol><li>索引大大减少了服务器需要扫描的数据量。</li><li>索引可以帮助服务器避免排序和临时表。</li><li>索引可以将随机 I/O 变为顺序 I/O。</li></ol><p>对于中到大型表，索引就非常有效。但对于特大型表，需要技术直接区分出查询需要的一组数据，而不是一条记录一条记录地匹配，例，分区技术：建立元数据信息表，例，假如执行那些需要聚合多个应用分布在多个表的数据的查询，则需要记录“哪个用户的信息存储在哪个表中”的元数据，这样在查询时就可以直接忽略那些不包含指定用户信息的表。对于 TB 级别的数据，定位单条记录的意义不大，所以经常会使用块级别元数据技术来替代索引。</p><h1 id="3-高性能索引的索引策略"><a href="#3-高性能索引的索引策略" class="headerlink" title="3 高性能索引的索引策略"></a>3 高性能索引的索引策略</h1><h2 id="3-1-前缀索引和索引选择性"><a href="#3-1-前缀索引和索引选择性" class="headerlink" title="3.1 前缀索引和索引选择性"></a>3.1 前缀索引和索引选择性</h2><p>索引选择性：不重复的索引值/数据表的记录总数，范围在0~1间，越高则查询越快。唯一索引的选择性是1，性能也是最好的。<br>列值过长，可以使用部分字段<code>LEFT(city,3)</code>作为前缀索引，这个值是通过<code>COUNT(DISTINCT LEFT(city,5))/COUNT(*)</code>的值来决定的，结果在 0.031 基本上就可用了。接着创建：<code>ALTER TABLE sakila.city_demo ADD KEY(city(5));</code><br>但是前缀索引虽然使索引更小、更快，但是无法使用前缀索引做<code>ORDER BY</code>和<code>GROUP BY</code>，也无法使用前缀索引做覆盖扫描。</p><blockquote><p>后缀索引（suffix index）也很有用途（电子邮箱），可以使用字符串反转后存储。</p></blockquote><h2 id="3-2-多列索引"><a href="#3-2-多列索引" class="headerlink" title="3.2 多列索引"></a>3.2 多列索引</h2><p>为每个列创建独立的索引，从<code>SHOW CREATE TABLE</code>中很容易看到这种情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t(</div><div class="line">    c1 <span class="built_in">INT</span>,</div><div class="line">    c2 <span class="built_in">INT</span>,</div><div class="line">    c3 <span class="built_in">INT</span>,</div><div class="line">    <span class="keyword">key</span>(c1),</div><div class="line">    <span class="keyword">key</span>(c2),</div><div class="line">    <span class="keyword">key</span>(c3)</div><div class="line">)</div></pre></td></tr></table></figure><p>这种索引策略是由于“把 WHERE 条件里面的列都建上索引”这样模糊的建议导致的。这最多是“一星”索引。例，<code>WHERE c1 = &#39;1&#39; OR c2 = &#39;2&#39;</code>，虽然在 MySQL5.0+ 会优化使用这两个索引，但是在 <code>explain</code> 的 <code>extra</code> 中会有 <code>Using union</code>，因此说明了索引的糟糕：  </p><ol><li>出现多个 <code>AND</code> 条件，则需要一个包含所有相关列的多列索引，而不是多个独立的单列索引。</li><li>多个 <code>OR</code> 或者联合操作时，如果有些索引的选择性不高，需要合并扫描返回的大量数据。</li><li>如果在 <code>EXPLAIN</code> 中看到有索引合并，应该好好检查查询和表的结构，也可以通过参数 <code>optimizer_switch</code> 来关闭索引合并功能，也可以使用 <code>IGNORE INDEX</code> 提示让优化器忽略掉某些索引。</li></ol><h2 id="3-3-选择合适的索引列顺序"><a href="#3-3-选择合适的索引列顺序" class="headerlink" title="3.3 选择合适的索引列顺序"></a>3.3 选择合适的索引列顺序</h2><p>最好通过 <code>pt-query-digest</code> 这样的工具报告重提取“最差”查询，再按照索引顺序进行优化。如果没有类似的具体查询来运行，那么最好还是按照经验法则来做，因为经验法则考虑的是全局性和选择性，而不是某个具体查询：<br><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/High_Performance_MySQL/5_2.png" alt=""><br><code>customer_id</code> 的选择性更高，所以答案是将其作为索引列的第一列。</p><h2 id="3-4-覆盖索引"><a href="#3-4-覆盖索引" class="headerlink" title="3.4 覆盖索引"></a>3.4 覆盖索引</h2><p>如果一个索引包含（覆盖）所有需要查询的字段的值，我们就称为“覆盖索引”。  </p><ol><li>因为索引是按照列值顺序存储的，所以对于 I/O 密集型的范围查询会比随机从磁盘读取每一行数据的 I/O 要少得多。</li><li>并不是所有类型的索引都可以称为覆盖索引。覆盖索引必须要存储索引列的值。</li></ol><p>当发起一个被覆盖的查询，在 <code>EXPLAIN</code> 的 <code>Extra</code> 列可以看到 <code>Using index</code> 的信息。</p><blockquote><p><code>type</code> 列的 <code>index</code> 和 <code>Extra</code> 列的 <code>Using index</code> 是完全不同，前者和覆盖索引毫无关系，它只是表示这个查询访问数据的方式。</p></blockquote><p>索引覆盖查询还有很多陷阱可能导致无法实现优化：<br><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/High_Performance_MySQL/5_3.png" alt="">  </p><ol><li>没有任何索引能够覆盖这个查询。因为查询从表中选择了所有的列，而没有任何索引覆盖了所有的列。</li><li>MySQL 不能再索引中执行 <code>LIKE</code> 操作，MySQL5.5- 只允许在索引中做简单比较操作，MySQL 能在索引中做最左前缀匹配的 <code>LIKE</code> 查询，因为该操作可以转为简单的比较操作，但是如果是通配符开头的 <code>LIKE</code> 查询，存储引擎就无法做比较匹配。这种情况下，MySQL 服务器只能提取数据行的值，而不是索引值来做比较。</li></ol><p>也有办法解决上面说的两个问题，重写查询并巧妙地设计索引。先将索引扩展至三个数据列（artist，title，prod_id），然后按如下方式重写查询：<br><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/High_Performance_MySQL/5_4.png" alt=""></p><h2 id="3-5-使用索引扫描来做排序"><a href="#3-5-使用索引扫描来做排序" class="headerlink" title="3.5 使用索引扫描来做排序"></a>3.5 使用索引扫描来做排序</h2><p>MySQL 有两种方式可以生成有序的结果：通过排序操作；或按索引顺序扫描；如果 <code>EXPLAIN</code> 出来的 type 列的值为 “index”，则说明 MySQL 使用了索引扫描来做排序（不要和 Extra 列的 “Using index” 搞混淆了）。<br>扫描索引本身是很快的，因为只需要从一条索引记录移动到紧接着的下一条记录。但如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就回表查询一次对应的行。这基本上都是随机 I/O，因此按索引顺序读取数据的速度通常要比顺序地全表扫描慢。<br>如果查询需要关联多张表，则只有当 <code>ORDER BY</code> 子句引用的字段全部为第一个表时，才能使用索引做排序。</p><p>例： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> rental(</div><div class="line">    PRIMARY <span class="keyword">KEY</span>(rental_id),</div><div class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> rental_date(rental_date, inventory_id, customer_id),</div><div class="line">    <span class="keyword">KEY</span> idx_fk_inventory_id(inventory_id),</div><div class="line">    <span class="keyword">KEY</span> idx_fk_customer_id(customer_id),</div><div class="line">    <span class="keyword">KEY</span> idx_fk_staff_id(staff_id),</div><div class="line">    ...</div><div class="line">)</div></pre></td></tr></table></figure><p><code>WHERE rental_date = &#39;2015-05-25&#39; ORDER BY inventory_id, customer_id</code> 因为索引第一列被指定为一个常数，所以查询排序。<br><code>WHERE rental_date = &#39;2015-05-25&#39; ORDER BY inventory_id</code> 也可以使用查询排序。<br><code>WHERE rental_date &gt; &#39;2005-05-25 ORDER BY rental_date, inventory_id</code> 也可以。<br>下面是不能使用索引做排序的查询：  </p><ol><li><code>WHERE rental_date = &#39;2015-05-25&#39; ORDER BY inventory_id DESC, customer_id ASC;</code> 因为索引列都是正序排序。</li><li><code>WHERE rental_date = &#39;2015-05-25&#39; ORDER BY inventory_id, staff_id;</code> 因为引用了一个不再索引中的列。</li><li><code>WHERE rental_date = &#39;2015-05-25&#39; ORDER BY customer_id;</code> 无法组成索引的最左前缀。</li><li><code>WHERE rental_date &gt; &#39;2015-05-25&#39; ORDER BY inventory_id, customer_id;</code> 因为第一列上是范围条件。</li><li><code>WHERE rental_date = &#39;2015-05-25&#39; AND inventory_id IN (1,2) ORDER BY customer_id;</code> 还是范围查询。</li></ol><h1 id="4-索引案例学习"><a href="#4-索引案例学习" class="headerlink" title="4 索引案例学习"></a>4 索引案例学习</h1><h1 id="5-维护索引和表"><a href="#5-维护索引和表" class="headerlink" title="5 维护索引和表"></a>5 维护索引和表</h1><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;索引能够轻易将查询性能提高几个数量级，“最优”的索引有时比一个“好的”索引性能要好两个数量级。创建一个真正“最优”的索引经常需要重写查询。&lt;/p&gt;
&lt;h1 id=&quot;1-索引基础&quot;&gt;&lt;a href=&quot;#1-索引基础&quot; class=&quot;headerlink&quot; title=&quot;1 索
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="高性能MySQL" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%AB%98%E6%80%A7%E8%83%BDMySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Netty实战笔记</title>
    <link href="http://www.liwenguang.cn/2017/12/26/netty_in_action/1.html/"/>
    <id>http://www.liwenguang.cn/2017/12/26/netty_in_action/1.html/</id>
    <published>2017-12-26T14:46:00.000Z</published>
    <updated>2017-12-26T14:46:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Netty实战" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Netty%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>四、Schema与数据类型优化</title>
    <link href="http://www.liwenguang.cn/2017/12/25/high_performance_MySQL/4.html/"/>
    <id>http://www.liwenguang.cn/2017/12/25/high_performance_MySQL/4.html/</id>
    <published>2017-12-25T04:31:00.000Z</published>
    <updated>2017-12-27T16:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-选择优化的数据类型"><a href="#1-选择优化的数据类型" class="headerlink" title="1 选择优化的数据类型"></a>1 选择优化的数据类型</h1><ol><li>更小的通常更好</li><li>简单就好：整型比字符操作代价更低，使用 MySQL 内建的类型而不是字符串来存储日期和时间，以及使用整型存储 IP 地址</li><li>尽量避免 NULL：可为 NULL 的列会使用更多的存储空间。 InnoDB 使用单独的位（bit）存储 NULL 值，但这不适用于 MyISAM</li></ol><p>在为列选择数据类型时，先确定大类型：数字、字符串、时间等。下一步是选择具体类型，很多数据类型可以存储相同类型的数据，只是存储的长度和范围不一样、允许的精度不同，或者需要的物理空间（磁盘和内存空间）不同。例如， TIMESTAMP 只使用 DATETIME 一半的存储空间，并且会根据时区变化，具有特殊的自动更新能力，另一方面， TIMESTAMP 允许的时间范围要小得多。  </p><p>本章只讨论基本的数据类型。 MySQL 为了兼容性支持很多别名，例如 INTEGER、BOOL 以及 NUMERIC ，它们只是别名，使用 SHOW CREATE TABLE 检查， MYSQL 报告的是基本类型，而不是别名。</p><h2 id="1-1-整数类型"><a href="#1-1-整数类型" class="headerlink" title="1.1 整数类型"></a>1.1 整数类型</h2><p>TINYINT，SMALLINT，MEDIUMINT，INT，BIGINT。分别使用8、16、24、32、64 位存储空间。它们可以存储的值得范围 -2^(N-1) ~ 2^(N-1) - 1，其中 N 是存储空间的位数。整数类型有可选的 UNSIGNED 属性，表示不允许负数，这样可以提高一倍的正数上限。  </p><p>整数计算一般使用 64 位的 BIGINT 整数。整数类型指定宽度，例如 INT(11)，对大多数应用这是没有意义的：它不会限制值得合法范围，只是规定了 MySQL 的一些交互工具（例如 MySQL命令行客户端）用来显示字符的个数。对于存储和计算来说，INT(1) 和 INT(20) 是相同的。</p><h2 id="1-2-实数类型"><a href="#1-2-实数类型" class="headerlink" title="1.2 实数类型"></a>1.2 实数类型</h2><p>实数是带有小数部分的数字。然而，它们不只是为了存储小数部分，也可以使用 DECIMAL 存储比 BIGINT 还大的整数。 MySQL 既支持精确类型，也不支持不精确类型。因为 CPU 不支持对 DECIMAL 的直接计算，所以在 MySQL5.0+ MySQL 服务器自身实现了 DECIMAL 的高精度计算，相对而言，CPU 直接支持原生浮点计算，所以浮点运算明显更快。<br>DECIMAL 的字节存储：每四个字节存储 9 个数字，例：DECIMAL(18,9) 小数点两边将各存储 9 个数字，一共使用 9 个字节：小数点前的数字用 4 个字节，小数点后的数字用 4 个字节，小数点本身占 1 个字节。<br>浮点类型在存储同样范围的值时，通常比 DECIMAL 使用更少的空间。 FLOAT 使用 4 个字节存储。 DOUBLE 占用 8 个字节。MySQL 使用 DOUBLE 作为内部浮点计算的类型。<br>将结果存储在 BIGINT 里，这样可以同时避免浮点存储计算不精确和 DECIMAL 精确计算代价高的问题。（根据小数的位数乘以相应的倍数）</p><h2 id="1-3-字符串类型"><a href="#1-3-字符串类型" class="headerlink" title="1.3 字符串类型"></a>1.3 字符串类型</h2><h3 id="1-VARCHAR-和-CHAR-类型"><a href="#1-VARCHAR-和-CHAR-类型" class="headerlink" title="1.VARCHAR 和 CHAR 类型"></a>1.VARCHAR 和 CHAR 类型</h3><h4 id="VARCHAR"><a href="#VARCHAR" class="headerlink" title="VARCHAR"></a>VARCHAR</h4><p>VARCHAR 类型用于存储可变长字符串，如果 MySQL 表使用 ROW_FORMAT = FIXED 创建的话，每一行都会使用定长存储，这会很浪费空间。<br>VARCHAR 在列最大长度 &lt;=255 字节的时候，额外用 1 个字节用于记录字符串的长度。例：VARCHAR(10) 的列需要 11 个字节的存储空间。VARCHAR(1000) 的列则需要 1002 个字节，因为需要 2 个字节存储长度信息。<br>MySQL5.0+ 在存储和检索时会保留末尾空格。<br>但是，由于行是变长的，在 UPDATE 时可能使行变得比原来长，这就导致需要额外的工作。<br>另外，InnoDB 可以把过长的 VARCHAR 存储为 BLOB，稍后讨论该问题。</p><h4 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h4><p>CHAR 类型是定长的，MySQL 总是根据定义的字符串长度分配足够的空间。<br>存储 CHAR 值时，MySQL 会删除所有的末尾空格。</p><h4 id="CHAR-VS-VARCHAR"><a href="#CHAR-VS-VARCHAR" class="headerlink" title="CHAR VS VARCHAR"></a>CHAR VS VARCHAR</h4><p>CHAR 适合存储很短的字符串，或者所有值都接近同一个长度。例：存储密码的 MD5 值，因为这是一个定长的值。<br>对于经常变更的数据， CHAR 也比 VARCHAR 更好，因为定长的 CHAR 类型不容易产生碎片。<br>对于非常短的值， CHAR(1) 比 VARCHAR(1) 在存储空间上也更有效率（后者需要额外一个字节存储长度）。<br>VARCHAR(100) 和 VARCHAR(200) 虽然在存储空间相同，但是在内存消耗不同，后者更大。尤其在排序和临时表（中间表）时。<br>摘自：<a href="http://tech.it168.com/a2011/0426/1183/000001183173.shtml" target="_blank" rel="external">http://tech.it168.com/a2011/0426/1183/000001183173.shtml</a></p><h3 id="2-BLOB-和-TEXT-类型"><a href="#2-BLOB-和-TEXT-类型" class="headerlink" title="2. BLOB 和 TEXT 类型"></a>2. BLOB 和 TEXT 类型</h3><p>BLOB 采用二进制存储、TEXT 采用字符存储。<br>与其它类型不同，MySQL 把每个 BLOB 和 TEXT 值当做一个独立的对象处理。当其太大时， InnoDB 会使用专门的“外部”存储区域进行存储。此时每个值在行内需要 1~4 个字节存储一个指针，然后再外部存储区域实际的值。<br>排序：MySQL 只对每个列的最前 max_sort_length 字节而不是整个字符串做排序。可以减少 max_sort_length 的值或者使用 ORDER BY SUBSTRING(column, length)。<br>MySQL 不能讲 BLOB 和 TEXT 列全部长度的字符串进行索引，也不能使用这些索引消除排序。<br>进行 ORDER BY 为了防止临时表过大，可以使用 SUBSTRING(column, length) 进行长度切割。</p><h3 id="3-使用枚举（ENUM）-代替字符串类型"><a href="#3-使用枚举（ENUM）-代替字符串类型" class="headerlink" title="3. 使用枚举（ENUM） 代替字符串类型"></a>3. 使用枚举（ENUM） 代替字符串类型</h3><p>MySQL 在存储枚举时非常紧凑，会根据列表值得数量压缩到一个或者两个字节中。 MySQL 在内部会将每个值在列表中的位置保存为整数，并且在表的 .frm 文件中保存 “数字-字符串”映射关系的“查找表”。<br>在 VARCHAR 与 ENUM 互相 JOIN 关联时，ENUM 与 ENUM 最快。因此如果不是必须和 VARCHAR 列进行关联，那么转换这些列为 ENUM 就是个好主意。这是一个通用的设计实践，在“查找表”时采用整数主键而避免采用基于字符串的值进行关联。</p><h2 id="1-4-日期和时间类型"><a href="#1-4-日期和时间类型" class="headerlink" title="1.4 日期和时间类型"></a>1.4 日期和时间类型</h2><h3 id="1-DATETIME"><a href="#1-DATETIME" class="headerlink" title="1.DATETIME"></a>1.DATETIME</h3><p>这个类型能保存大范围的值，精度为秒。使用 8 个字节的存储空间。</p><h3 id="2-TIMESTAMP"><a href="#2-TIMESTAMP" class="headerlink" title="2.TIMESTAMP"></a>2.TIMESTAMP</h3><p>保存了从 1970年1月1日~2038年，MySQL 提供了 FROM_UNIXTIME() 和 UNIX_TIMESTAMP() 函数将日期和 Unix 时间戳转换。使用 4 个字节存储。</p><h2 id="1-5-位数据类型"><a href="#1-5-位数据类型" class="headerlink" title="1.5 位数据类型"></a>1.5 位数据类型</h2><h3 id="1-BIT"><a href="#1-BIT" class="headerlink" title="1.BIT"></a>1.BIT</h3><p>尽量少用。</p><h3 id="2-SET"><a href="#2-SET" class="headerlink" title="2.SET"></a>2.SET</h3><p>如果需要保存很多 true/false 值，可以考虑合并这些列到一个 SET 数据类型，它在 MySQL 内部是以一系列打包的位的集合来表示的。这样就有效的利用了存储空间。缺点是改变列的定义代价较高：需要 ALTER TABLE（这对大表是非常昂贵的操作，但是后面给出了解决方法）。一般来说，也无法再 SET 列上通过索引查找。</p><blockquote><p>在整数列进行按位操作<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;SET @CAN_READ   := 1 &lt;&lt; 0,</div><div class="line">&gt;     @CAN_WRITE  := 1 &lt;&lt; 1,</div><div class="line">&gt;     @CAN_DELETE := 1 &lt;&lt; 2;</div><div class="line">&gt;CREATE TABLE acl (</div><div class="line">&gt;     perms TINYINT UNSIGNED NOT NULL DEFAULT 0    </div><div class="line">&gt;);</div><div class="line">&gt;INSERT INTO acl(perms) VALUES (@CAN_READ+@CAN_DELETE);</div><div class="line">&gt;SELECT perms FROM acl WHERE perms &amp; @CAN_READ;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p><p>当然，也可以使用代码变量而不是 MySQL 变量。</p></blockquote><h2 id="1-6-选择标识符（identifier）"><a href="#1-6-选择标识符（identifier）" class="headerlink" title="1.6 选择标识符（identifier）"></a>1.6 选择标识符（identifier）</h2><p>标识列与其它值进行比较（例，在关联操作中），或通过标识列寻找其它列。标识列也可能在另外的表中作为外键使用。<br>选择标识列的类型时，不仅仅需要考虑存储类型，还需要考虑 MySQL 对这种类型怎么执行计算和比较。例， MySQL 在内部使用整数存储 ENUM 和 SET 类型，然后在做比较操作时转换为字符串。<br>在可以满足值得范围的需求，并且预留未来增长空间的前提下，应该选择最小的数据类型。例如，TINYINT 比 INT 少了 3 个字节，但是可能导致很大的性能差异。<br>尽量使用整数。如果存储 UUID 值，用 UNHEX() 函数转换为 16 字节的数字存储，并且存储在一个 BINARY(16) 列中。</p><h2 id="1-7-特殊类型数据"><a href="#1-7-特殊类型数据" class="headerlink" title="1.7 特殊类型数据"></a>1.7 特殊类型数据</h2><p>例，IPv4 地址人们通常使用 VARCHAR(15) 列来存储 IP 地址。然而，它们实际上是 32 位无符号整数，不是字符串。所以应该用无符号整数存储 IP 地址。 MySQL 提供 INET_ATON() 和 INET_NTOA() 函数在这两种表示方法之间转换。</p><h1 id="2-MySQL-schema-设计中的陷阱"><a href="#2-MySQL-schema-设计中的陷阱" class="headerlink" title="2 MySQL schema 设计中的陷阱"></a>2 MySQL schema 设计中的陷阱</h1><h2 id="2-1-太多的列"><a href="#2-1-太多的列" class="headerlink" title="2.1 太多的列"></a>2.1 太多的列</h2><p>MySQL 的存储引擎 API 工作时需要在服务器层和存储引擎层之间通过行缓冲格式拷贝数据，然后再服务器层将缓冲内容解码成各个列。列转行的操作代价是非常高的。</p><h2 id="2-2-太多的关联"><a href="#2-2-太多的关联" class="headerlink" title="2.2 太多的关联"></a>2.2 太多的关联</h2><p>阿里手册规定单次关联不能超过 3 张表。</p><h2 id="2-3-全能的枚举"><a href="#2-3-全能的枚举" class="headerlink" title="2.3 全能的枚举"></a>2.3 全能的枚举</h2><p>CREATE TABLE … ( country enum(‘’, ‘0’, ‘1’, … , ‘31’))<br>当需要在枚举列表中增加一个新的国家时就要做一次 ALTER TABLE 操作，在 MySQL5.0- 这是一种阻塞操作，即使在 MySQL5.0+ ，如果不是在列表的末尾增加值也会一样需要 ALTER TABLE。</p><h2 id="2-4-变相的枚举"><a href="#2-4-变相的枚举" class="headerlink" title="2.4 变相的枚举"></a>2.4 变相的枚举</h2><p>枚举列允许在列中存储一组定义值中的单个值，集合（SET）列则允许在列中存储一组定义值的一个或多个值。这会导致混乱。</p><h2 id="2-5-非此发明（Not-Invent-Here）的-NULL"><a href="#2-5-非此发明（Not-Invent-Here）的-NULL" class="headerlink" title="2.5 非此发明（Not Invent Here）的 NULL"></a>2.5 非此发明（Not Invent Here）的 NULL</h2><p>CREATE TABLE … (dt DATETIME NOT NULL DEFAULT ‘0000-00-00 00:00:00’)<br>伪造的全 0 值可能导致很多问题。（可以配置 MySQL 的 SQL_MODE 来禁止不可能的日期，对于新应用这是个非常好的实践经验）。</p><h1 id="3-缓存表和汇总表"><a href="#3-缓存表和汇总表" class="headerlink" title="3 缓存表和汇总表"></a>3 缓存表和汇总表</h1><p>有时提升性能最好的方法是在同一张表中保存衍生的冗余数据。然而，有时也需要创建一张完全独立的汇总表或缓存表。</p><h2 id="3-1-计数器表"><a href="#3-1-计数器表" class="headerlink" title="3.1 计数器表"></a>3.1 计数器表</h2><p>创建一张独立的表存储计数器通常是个好主意。例，有一个计数器表，只有一行数据，记录网站的点击次数：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hit_counter (</div><div class="line">    cnt <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span></div><div class="line">) <span class="keyword">engine</span>=<span class="keyword">InnoDB</span>;</div></pre></td></tr></table></figure><p>每次点击：<code>UPDATE hit_counter SET cnt = cnt + 1;</code><br>问题在于，对于任何想要更新这一行的事务来说，这条记录上都有一个全局的互斥锁（mutex）。这会使得这些事务只能串行执行。要获得更高的并发更新性能，也可以将计数器保存在多行中，每次随机选择一行进行更新。<br>要获得统计结果：<code>SELECT SUM(cnt) FROM hit_count;</code>。<br>一个常见的需求是每隔一段时间开始一个新的计数器（例，每天一个）。如果需要这么做，则可以再简单地修改一下表设计：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hit_counter (</div><div class="line">    <span class="keyword">day</span> <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    slot tinyint <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    cnt <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    primary <span class="keyword">key</span>(<span class="keyword">day</span>, slot)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</div></pre></td></tr></table></figure><p>在这个场景下，可以不用像前面的例子那样预先生成行，而是<code>ON DUPLICATE KEY UPDATE</code>代替。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> daily_hit_counter(<span class="keyword">day</span>, slot, cnt)</div><div class="line">    <span class="keyword">VALUES</span> (<span class="keyword">CURRENT_DATE</span>, <span class="keyword">RAND</span>() * <span class="number">100</span>, <span class="number">1</span>)</div><div class="line">    <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> cnt = cnt + <span class="number">1</span>;</div></pre></td></tr></table></figure><p>如果希望减少表的行数，以避免表变得太大，可以写一个周期执行的任务，合并所有结果到 0 号槽，并删除所有其它的槽：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> daily_hit_counter <span class="keyword">as</span> c</div><div class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</div><div class="line">        <span class="keyword">SELECT</span> <span class="keyword">day</span>, <span class="keyword">SUM</span>(cnt) <span class="keyword">AS</span> cnt, <span class="keyword">MIN</span>(slot) <span class="keyword">AS</span> mslot</div><div class="line">        <span class="keyword">FROM</span> daily_hit_counter</div><div class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">day</span></div><div class="line">    ) <span class="keyword">AS</span> x <span class="keyword">USING</span>(<span class="keyword">day</span>)</div><div class="line"><span class="keyword">SET</span> c.cnt  = <span class="keyword">IF</span>(c.slot = x.mslot, x.cnt, <span class="number">0</span>),</div><div class="line">    c.slot = <span class="keyword">IF</span>(c.slot = x.mslot, <span class="number">0</span>, c.slot); </div><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> daily_hit_counter <span class="keyword">WHERE</span> slot &lt;&gt; <span class="number">0</span> <span class="keyword">AND</span> cnt = <span class="number">0</span>;</div></pre></td></tr></table></figure><h1 id="4-加快-ALTER-TABLE-操作的速度"><a href="#4-加快-ALTER-TABLE-操作的速度" class="headerlink" title="4 加快 ALTER TABLE 操作的速度"></a>4 加快 ALTER TABLE 操作的速度</h1><p>假如要修改电影的默认租赁期限，从三天改到五天，下面是很慢的方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> film </div><div class="line"><span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> rental_duration tinyint(<span class="number">3</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">5</span>;</div></pre></td></tr></table></figure><p><code>show status</code>语句显示这个语句做了 1000 次读和 1000 次插入操作。换句话说，它拷贝了整张表到一张新表。<br>理论上，MySQL 可以跳过创建新表的步骤，即直接修改 .frm 文件而不设计表数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> film</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> rental_duraion <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="number">5</span>;</div></pre></td></tr></table></figure><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h1><ol><li>避免过度设计</li><li>使用小而简单的合适数据类型，避免使用 NULL 值</li><li>关联标识符尽量使用相同的数据类型</li><li>注意可变长字符串，其在临时表和排序时可能导致悲观的按最大长度分配内存</li><li>尽量使用整型定义标识列</li><li>小心使用 ENUM 和 SET</li><li><code>ALTER TABLE</code>在大部分情况下都会锁表并且重建整张表。建议先在备库执行<code>ALTER</code>完成后将其切换为主库</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-选择优化的数据类型&quot;&gt;&lt;a href=&quot;#1-选择优化的数据类型&quot; class=&quot;headerlink&quot; title=&quot;1 选择优化的数据类型&quot;&gt;&lt;/a&gt;1 选择优化的数据类型&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;更小的通常更好&lt;/li&gt;
&lt;li&gt;简单就好：整型比字符操
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="高性能MySQL" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%AB%98%E6%80%A7%E8%83%BDMySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>ThreadLocal 的心得</title>
    <link href="http://www.liwenguang.cn/2017/12/22/tech/threadlocal_1.html/"/>
    <id>http://www.liwenguang.cn/2017/12/22/tech/threadlocal_1.html/</id>
    <published>2017-12-21T17:24:00.000Z</published>
    <updated>2017-12-21T17:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在《架构探险——从零开始架构》中，第四章的自己实现 ThreadLocal 感悟：<br>ThreadLocal 中虽然使用了 Map 进行保存线程变量，但是为了防止引入锁（Map 的多线程访问）影响性能，从而使用让不同的 Thread 保存不同的 Map（ThreadLoaclMap）实例，这样不同的Thread 有不同的 ThreadLocalMap 实例，就不用考虑锁的问题。<br>另外为了避免内存泄漏、回收不及时等问题，从而让 ThreadLocalMap 的 key 使用弱引用。<br>同时，为了保证当 key 为 null 时，value 无法正常释放时，在每次 set 时，都会遍历 key ，当 key 为 null 则会执行 replaceStaleEntry()，即将 key 为 null 的 value 值也置为 null，从而来让其回收。<br>这里讲解更加详细：<a href="http://www.jasongj.com/java/threadlocal/" target="_blank" rel="external">http://www.jasongj.com/java/threadlocal/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在《架构探险——从零开始架构》中，第四章的自己实现 ThreadLocal 感悟：&lt;br&gt;ThreadLocal 中虽然使用了 Map 进行保存线程变量，但是为了防止引入锁（Map 的多线程访问）影响性能，从而使用让不同的 Thread 保存不同的 Map（ThreadLo
      
    
    </summary>
    
      <category term="小结" scheme="http://www.liwenguang.cn/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>《MyBatis 从入门到精通》总结</title>
    <link href="http://www.liwenguang.cn/2017/12/18/tech/mybatis0to1.html/"/>
    <id>http://www.liwenguang.cn/2017/12/18/tech/mybatis0to1.html/</id>
    <published>2017-12-18T14:10:00.000Z</published>
    <updated>2017-12-18T14:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记总结+源码：<a href="https://github.com/LiWenGu/MySourceCode/tree/master/mybatis0to1" target="_blank" rel="external">https://github.com/LiWenGu/MySourceCode/tree/master/mybatis0to1</a><br>在前七章都打了对应的标签，可以通过 git checkout来。<br><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/mybatis0to1/summary.png" alt=""><br>总结就是，将 sql 语句从代码中抽离出来，通过 xml 的配置来实现单表、多表的映射，最后通过动态代理来执行方法，很强的解耦性。<br>把 SQL 放在了 XML 中，然后用一些判断来实现动态 SQL ，最后通过 SqlSession 、SqlSessionFacotry 的生命周期来绑定一级、二级缓存。<br>不学之前感觉很神奇，学完之后也就那么回事，不过还是要多学学基础，例如读取配置、缓存、一级动态代理等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;笔记总结+源码：&lt;a href=&quot;https://github.com/LiWenGu/MySourceCode/tree/master/mybatis0to1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/LiWen
      
    
    </summary>
    
      <category term="小结" scheme="http://www.liwenguang.cn/categories/%E5%B0%8F%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>电影《帕丁顿熊》有感</title>
    <link href="http://www.liwenguang.cn/2017/12/13/talker/paddington.html/"/>
    <id>http://www.liwenguang.cn/2017/12/13/talker/paddington.html/</id>
    <published>2017-12-12T16:33:00.000Z</published>
    <updated>2017-12-12T16:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Please look after this bear, thank you.</p><p>联想最近的北京大兴事件，有点苦涩，现代人的城市，忘记如何对待一个流浪的人。  </p><p>每个城市都会有着提着行李箱，下着雨，在站台上的外乡人，唯一的区别是如何对待他们。  </p><hr><p>城市应该有它自己的包容心。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Please look after this bear, thank you.&lt;/p&gt;
&lt;p&gt;联想最近的北京大兴事件，有点苦涩，现代人的城市，忘记如何对待一个流浪的人。  &lt;/p&gt;
&lt;p&gt;每个城市都会有着提着行李箱，下着雨，在站台上的外乡人，唯一的区别是如何对待他们。  &lt;
      
    
    </summary>
    
      <category term="闲聊" scheme="http://www.liwenguang.cn/categories/%E9%97%B2%E8%81%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>十三、PGP——密码技术的完美组合</title>
    <link href="http://www.liwenguang.cn/2017/12/07/graphic2cryptography/13.html/"/>
    <id>http://www.liwenguang.cn/2017/12/07/graphic2cryptography/13.html/</id>
    <published>2017-12-07T15:44:00.000Z</published>
    <updated>2017-12-07T15:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-本章概要"><a href="#1-本章概要" class="headerlink" title="1 本章概要"></a>1 本章概要</h1><p>本章中，将以密码软件 PGP（Pretty Good Privacy）为题材，思考一下将前面章节中学习的密码技术进行组合的方法。</p><h1 id="2-PGP简介"><a href="#2-PGP简介" class="headerlink" title="2 PGP简介"></a>2 PGP简介</h1><p>PGP 是 1990 年编写的密码软件。</p><h2 id="2-1-PGP-的功能"><a href="#2-1-PGP-的功能" class="headerlink" title="2.1 PGP 的功能"></a>2.1 PGP 的功能</h2><h3 id="1-对称密码"><a href="#1-对称密码" class="headerlink" title="1.对称密码"></a>1.对称密码</h3><h3 id="2-公钥密码"><a href="#2-公钥密码" class="headerlink" title="2.公钥密码"></a>2.公钥密码</h3><h3 id="3-数字签名"><a href="#3-数字签名" class="headerlink" title="3.数字签名"></a>3.数字签名</h3><h3 id="4-单向散列函数"><a href="#4-单向散列函数" class="headerlink" title="4.单向散列函数"></a>4.单向散列函数</h3><h3 id="5-证书"><a href="#5-证书" class="headerlink" title="5.证书"></a>5.证书</h3><h3 id="6-压缩"><a href="#6-压缩" class="headerlink" title="6.压缩"></a>6.压缩</h3><h3 id="7-文本数据"><a href="#7-文本数据" class="headerlink" title="7.文本数据"></a>7.文本数据</h3><h3 id="8-大文件的拆分和平和"><a href="#8-大文件的拆分和平和" class="headerlink" title="8.大文件的拆分和平和"></a>8.大文件的拆分和平和</h3><h3 id="9-钥匙串管理"><a href="#9-钥匙串管理" class="headerlink" title="9.钥匙串管理"></a>9.钥匙串管理</h3><h1 id="3-生成秘钥对"><a href="#3-生成秘钥对" class="headerlink" title="3 生成秘钥对"></a>3 生成秘钥对</h1><h1 id="4-加密与解密"><a href="#4-加密与解密" class="headerlink" title="4 加密与解密"></a>4 加密与解密</h1><h1 id="5-生成和验证数字签名"><a href="#5-生成和验证数字签名" class="headerlink" title="5 生成和验证数字签名"></a>5 生成和验证数字签名</h1><h1 id="6-生成数字签名并加密以及解密并验证数字签名"><a href="#6-生成数字签名并加密以及解密并验证数字签名" class="headerlink" title="6 生成数字签名并加密以及解密并验证数字签名"></a>6 生成数字签名并加密以及解密并验证数字签名</h1><h1 id="7-信任网"><a href="#7-信任网" class="headerlink" title="7 信任网"></a>7 信任网</h1><h2 id="7-1-公钥合法性"><a href="#7-1-公钥合法性" class="headerlink" title="7.1 公钥合法性"></a>7.1 公钥合法性</h2><p>在使用 PGP 时，确认自己所得到的公钥是否真的属于正确的人（公钥合法性）是非常重要的，因为公钥可能会通过中间人攻击被替换（参 5.7.4节）。<br>第十章介绍的证书就是确认公钥合法性的方法之一。证书就是由认证机构对公钥所施加的数字签名，通过验证这个数字签名就可以确认公钥合法性。<br>然而，PGP 中却没有使用认证机构，而是采用了一种叫<strong>信任网</strong>（web of trust）的方法。在这种方法中， PGP 用户会<strong>互相对对方的公钥进行数字签名</strong>。<br>信任网的要点是“不依赖认证机构，而是建立每个人之间的信任关系”。换言之，就是能够自己决定要信任哪些公钥。<br>下面介绍 PGP 的信任网是如何建立起来的。</p><h3 id="1-场景1：通过自己的数字签名进行确认"><a href="#1-场景1：通过自己的数字签名进行确认" class="headerlink" title="1.场景1：通过自己的数字签名进行确认"></a>1.场景1：通过自己的数字签名进行确认</h3><p>Alice 和 Bob 约会，在告别的时候， Bob 给了 Alice 一张存储卡，并说“这是我的公钥”。<br>Alice 回到家中，从存储卡中取出 Bob 的公钥，并存放到自己所使用的 PGP 的公钥串中（导入公钥）。由于 Alice 确信刚刚导入的公钥确实是属于 Bob 本人的，因此 Alice 对这个公钥加上了自己的数字签名。<br>对 Bob 的公钥加上数字签名，就相当于 Alice 生命“这个公钥属于 Bob 本人（即这个公钥是合法的）”。<br>随后，Alice 收到了来自 Bob 的邮件，由于这封邮件带有 Bob 的数字签名，因此 Alice 想用 PGP 来验证 Bob 的数字签名。 PGP 将执行下面这些操作：  </p><ol><li>为了验证 Bob 的数字签名， PGP 需要从 Alice 的公钥串中寻找 Bob 的公钥。</li><li>Alice 的公钥串中包含 Bob 的公钥，因为前几天约会之后 Alice 导入了 Bob 的公钥。</li><li>PGP 发现 Bob 的公钥带有 Alice 的数字签名。</li><li>为了验证 Alice 的数字签名，PGP 需要从 Alice 的公钥串中寻找 Alice 自己的公钥。</li><li>PGP 使用 Alice 的公钥对 Bob 的公钥上的 Alice 的数字签名进行验证。如果验证成功，则可以确认这的确就是 Bob 的公钥。</li><li>PGP 使用合法的 Bob 的公钥对邮件上附带的 Bob 的数字签名进行验证。</li></ol><h3 id="2-场景2：通过自己完全信任的人的数字签名进行确认"><a href="#2-场景2：通过自己完全信任的人的数字签名进行确认" class="headerlink" title="2.场景2：通过自己完全信任的人的数字签名进行确认"></a>2.场景2：通过自己完全信任的人的数字签名进行确认</h3><p>Alice 有一个叫 Trent 的男朋友。在 Alice 的公钥串中，也包含带有 Alice 的数字签名的 Trent 的公钥。 Alice 非常信任 Trent ，她想：<strong>经过他签名的公钥一定是合法的</strong>。<br>假设 Alice 收到了一封来自 Carrol 的邮件</p><h1 id="8-本章小结"><a href="#8-本章小结" class="headerlink" title="8 本章小结"></a>8 本章小结</h1><h1 id="9-小测验"><a href="#9-小测验" class="headerlink" title="9 小测验"></a>9 小测验</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-本章概要&quot;&gt;&lt;a href=&quot;#1-本章概要&quot; class=&quot;headerlink&quot; title=&quot;1 本章概要&quot;&gt;&lt;/a&gt;1 本章概要&lt;/h1&gt;&lt;p&gt;本章中，将以密码软件 PGP（Pretty Good Privacy）为题材，思考一下将前面章节中学习的密码
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="图解密码技术" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>十二、随机数——不可预测性的源泉</title>
    <link href="http://www.liwenguang.cn/2017/12/06/graphic2cryptography/12.html/"/>
    <id>http://www.liwenguang.cn/2017/12/06/graphic2cryptography/12.html/</id>
    <published>2017-12-06T15:40:00.000Z</published>
    <updated>2017-12-07T15:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-骡子的锁匠铺"><a href="#1-骡子的锁匠铺" class="headerlink" title="1 骡子的锁匠铺"></a>1 骡子的锁匠铺</h1><p>很久很久之前，骡子开了一家锁匠铺，他说：“我做的锁头很坚固，小偷绝对打不开。”因此动物村里所有的动物都为自己的房子装上了骡子做的锁。<br>骡子做的锁确实很坚固，但是每把锁头上用的钥匙居然都是同一个形状的。因此小偷只要得到了一栋房子的钥匙，就可以打开所有房子的锁了。<br>教训：坚固的锁头固然重要，但不可预测的钥匙更加重要。</p><h1 id="2-本章概要"><a href="#2-本章概要" class="headerlink" title="2 本章概要"></a>2 本章概要</h1><ul><li>使用随机数的密码技术</li><li>随机数的性质</li><li>伪随机数生成器</li><li>具体的伪随机数生成器</li><li>对伪随机数生成器的攻击</li></ul><h1 id="3-使用随机数的密码技术"><a href="#3-使用随机数的密码技术" class="headerlink" title="3 使用随机数的密码技术"></a>3 使用随机数的密码技术</h1><h2 id="3-1-随机数是干什么的"><a href="#3-1-随机数是干什么的" class="headerlink" title="3.1 随机数是干什么的"></a>3.1 随机数是干什么的</h2><ol><li>生成秘钥：用于对称密码和消息认证码。</li><li>生成密钥对：用于公钥密码和数字签名。</li><li>生成初始化向量（IV）：用于分组密码的 CBC、CFC 和 OFB 模式。</li><li>生成 nonce：用于防御重放攻击以及分组密码的 CTR 模式等。</li><li>生成盐：用于基于口令的密码（PBE）等。</li></ol><p>在这里，请大家记住<strong>为了不让攻击者看穿而使用随机数</strong>这一观点，因为“无法看穿”，及不可预测性，正是本章的主题。</p><h1 id="4-随机数的性质"><a href="#4-随机数的性质" class="headerlink" title="4 随机数的性质"></a>4 随机数的性质</h1><h2 id="4-1-对随机数的性质分类"><a href="#4-1-对随机数的性质分类" class="headerlink" title="4.1 对随机数的性质分类"></a>4.1 对随机数的性质分类</h2><ol><li>随机性：不存在统计学偏差，是完全杂乱的数列。</li><li>不可预测性：不能从过去的数列推测出下一个出现的数。</li><li>不可重现性：除非将数列本身保存下来，否则不能重现相同的数列。</li></ol><p>为了方便起见，将上述三个性质按顺序分别命名为“弱伪随机数”、“强伪随机数”和“真随机数”。||随机性|不可预测性|不可重现性|||:-:|:-:|:-:|:-:|:-:||弱伪随机数|✔️|✘|✘|只具备随机性||强伪随机数|✔️|✔️|✘|具备不可预测性||真随机数|✔️|✔️|✔️|具备不可重现性|</p><p><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/graphic2cryptography/12_1.png" alt=""></p><h2 id="4-2-随机性"><a href="#4-2-随机性" class="headerlink" title="4.2 随机性"></a>4.2 随机性</h2><p>杂乱无章并不代表不会被看穿，因此本书中将只具备随机性的伪随机数称为“弱伪随机数”。</p><h2 id="4-3-不可预测性"><a href="#4-3-不可预测性" class="headerlink" title="4.3 不可预测性"></a>4.3 不可预测性</h2><p>不可预测性（unpredictability），是一种“不可能事先说中”的性质，及不可预测性。即，攻击者在知道过去生成的为随机数列的前提下，依然无法预测出下一个生成出来的伪随机数的性质。</p><h2 id="4-4-不可重现性"><a href="#4-4-不可重现性" class="headerlink" title="4.4 不可重现性"></a>4.4 不可重现性</h2><p>即，无法重现和某一随机数列完全相同的数列的性质。如果除了将随机数列本身保存下来意外，没有其它方法能够重现该数列，则我们就说该随机数列具备不可重现性。<br>要生成具备不可重现性的随机数列，需要从不可重现的物理现象中获取信息，比如周围的温度和声音的变化、用户移动的鼠标的位置信息、键盘输入的时间间隔、放射线测量仪的输出值等，根据从这些硬件中获取的信息而生成的数列，一般可以认为是具备不可重现性的随机数列。</p><h1 id="5-伪随机数生成器"><a href="#5-伪随机数生成器" class="headerlink" title="5 伪随机数生成器"></a>5 伪随机数生成器</h1><p>仅仅靠软件无法生成真随机数，因此要加上一个“伪”。</p><h2 id="5-1-伪随机数生成器的结构"><a href="#5-1-伪随机数生成器的结构" class="headerlink" title="5.1 伪随机数生成器的结构"></a>5.1 伪随机数生成器的结构</h2><p>伪随机数生成器具有“内部状态”，并根据外部输入的“种子”来生成伪随机数列。<br><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/graphic2cryptography/12_2.png" alt="">  </p><h3 id="1-伪随机数生成器的内部状态"><a href="#1-伪随机数生成器的内部状态" class="headerlink" title="1.伪随机数生成器的内部状态"></a>1.伪随机数生成器的内部状态</h3><p>伪随机数生成器的内部状态，是指伪随机数生成器所管理的内存中的数值。伪随机数生成器会根据内存中的数值进行计算，并将计算的结果作为伪随机数输出。随后，为了响应下一个伪随机数请求。伪随机数生成器会改变自己的内部状态。</p><h3 id="2-伪随机数生成器的种子"><a href="#2-伪随机数生成器的种子" class="headerlink" title="2.伪随机数生成器的种子"></a>2.伪随机数生成器的种子</h3><p>伪随机数的种子是用来对伪随机数生成器的内部状态进行初始化的。<br><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/graphic2cryptography/12_3.png" alt=""></p><h1 id="6-具体的伪随机数生成器"><a href="#6-具体的伪随机数生成器" class="headerlink" title="6 具体的伪随机数生成器"></a>6 具体的伪随机数生成器</h1><h2 id="6-1-杂乱的方法"><a href="#6-1-杂乱的方法" class="headerlink" title="6.1 杂乱的方法"></a>6.1 杂乱的方法</h2><p>用一个程序员都不懂的算法生成，但是这是错误的，不能用于密码技术。因为，周期太短，使用复杂算法所生成的数列大多数都会具有很短的周期（即短数列的不断重复）。另外则是，无法判断所生成的随机数是否具备不可预测性。</p><h2 id="6-2-线性同余法"><a href="#6-2-线性同余法" class="headerlink" title="6.2 线性同余法"></a>6.2 线性同余法</h2><p>线性同余法（linear congruential method）是一种使用很广泛的伪随机数生成器算法。然而，它并不能用于密码技术。<br>A、C、M 都是常量，且 A 和 C 需要小于 M。接下来，根据种子 R0 计算下一个伪随机数 R1：<br>R1 = （A <em> R0 + C） mod M。<br>当前得到的伪随机数即是下一个伪随机数的种子：<br>Rn+1 = (A </em> Rn + C) mod M。<br>但是这具有周期性，而且可以通过上一个种子得到下一个伪随机数。因此不具备不可预测性，不能将线性同余法用于密码技术。<br>很多伪随机数生成器的库函数都是采用线性同余法编写的。包括 C 语言的库函数 rand。 以及 java 的 java.util.Random 类等。</p><h2 id="6-3-单向散列函数法"><a href="#6-3-单向散列函数法" class="headerlink" title="6.3 单向散列函数法"></a>6.3 单向散列函数法</h2><p><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/graphic2cryptography/12_4.png" alt=""><br>攻击者要预测下一个伪随机数，需要知道计数器的当前值，以及，破解单向散列函数的单向性。利用了单向散列函数的单向性。</p><h2 id="6-4-密码法"><a href="#6-4-密码法" class="headerlink" title="6.4 密码法"></a>6.4 密码法</h2><p><img src="http://leran2deeplearnjavawebtech.oss-cn-beijing.aliyuncs.com/learn/graphic2cryptography/12_5.png" alt=""><br>密码的机密性是支撑伪随机数生成器不可预测性的基础。</p><h1 id="7-对伪随机数生成器的攻击"><a href="#7-对伪随机数生成器的攻击" class="headerlink" title="7 对伪随机数生成器的攻击"></a>7 对伪随机数生成器的攻击</h1><h2 id="7-1-对种子进行攻击"><a href="#7-1-对种子进行攻击" class="headerlink" title="7.1 对种子进行攻击"></a>7.1 对种子进行攻击</h2><h2 id="7-2-对随机数池进行攻击"><a href="#7-2-对随机数池进行攻击" class="headerlink" title="7.2 对随机数池进行攻击"></a>7.2 对随机数池进行攻击</h2><p>一般不会到了需要的时候才当场生成真随机数，而是会事先在一个名为<strong>随机数池</strong>（random pool）的文件中积累随机比特序列。当密码软件需要伪随机数的种子时，可以从这个随机数池中取出所需长度的随机比特序列来使用。这是不能被攻击所知道的。</p><h1 id="8-本章小结"><a href="#8-本章小结" class="headerlink" title="8 本章小结"></a>8 本章小结</h1><p>由于密码技术的伪随机数生成器，需要使用单向散列函数和密码等技术来确保不可预测性。</p><h1 id="9-小测验"><a href="#9-小测验" class="headerlink" title="9 小测验"></a>9 小测验</h1><ol><li>伪随机数的种子需要对攻击者保密。</li><li>线性同余法可以作为用于密码的伪随机数生成器。</li><li>具备随机性的伪随机数生成器不一定具备不可预测性。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-骡子的锁匠铺&quot;&gt;&lt;a href=&quot;#1-骡子的锁匠铺&quot; class=&quot;headerlink&quot; title=&quot;1 骡子的锁匠铺&quot;&gt;&lt;/a&gt;1 骡子的锁匠铺&lt;/h1&gt;&lt;p&gt;很久很久之前，骡子开了一家锁匠铺，他说：“我做的锁头很坚固，小偷绝对打不开。”因此动物村里所
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="图解密码技术" scheme="http://www.liwenguang.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
